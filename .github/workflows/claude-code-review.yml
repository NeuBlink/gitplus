name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Run on all PR types - no path restrictions to ensure workflow and infrastructure changes are reviewed

jobs:
  claude-review:
    # Skip bot-created PRs since they don't have access to OAuth secrets
    if: github.event.pull_request.user.type != 'Bot'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide comprehensive feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage
            - Architecture and design
            - Documentation quality
            
            **Please structure your review as follows:**
            
            ## Code Review Summary
            
            **Overall Assessment:** [Your overall assessment - Approve, Request Changes, or Comment]
            
            **Key Findings:**
            - [List your main findings here]
            
            **Security Concerns:** [Any security issues you identify]
            
            **Code Quality:** [Assessment of code quality, patterns, best practices]
            
            **Testing:** [Assessment of test coverage and quality]
            
            **Performance:** [Any performance considerations]
            
            **Recommendations:**
            - [Your specific recommendations]
            
            ## Detailed Analysis
            
            [Provide your detailed analysis here - be thorough and specific]
            
            ## Final Recommendation
            
            [Your final recommendation: APPROVE, REQUEST_CHANGES, or COMMENT with clear reasoning]
            
            ---
            
            Be constructive and helpful in your feedback. Provide specific, actionable suggestions for improvement.

          # Optional: Use sticky comments to make Claude reuse comment on subsequent pushes
          use_sticky_comment: true

      - name: Capture Claude review content
        if: always()  # Always run to capture review content
        run: |
          echo "üìù Capturing Claude review content for artifact..."
          
          # Validate and sanitize GitHub context variables
          if ! [[ "$PR_NUMBER" =~ ^[0-9]+$ ]] || [ "$PR_NUMBER" -lt 1 ] || [ "$PR_NUMBER" -gt 99999 ]; then
            echo "‚ùå ERROR: Invalid PR number format: $PR_NUMBER"
            exit 1
          fi
          
          if ! [[ "$GITHUB_RUN_ID" =~ ^[0-9]+$ ]] || ! [[ "$GITHUB_RUN_ATTEMPT" =~ ^[0-9]+$ ]]; then
            echo "‚ùå ERROR: Invalid GitHub run parameters"
            exit 1
          fi
          
          # Create directory for this workflow run using validated variables
          RUN_DIR="/tmp/claude-review-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          mkdir -p "$RUN_DIR"
          
          echo "üîç Waiting for Claude's comprehensive review to be posted..."
          
          # Adaptive polling: shorter intervals initially, longer for later attempts
          # Total timeout: ~2 minutes with efficient early detection
          MAX_ATTEMPTS=${MAX_ATTEMPTS:-20}  # More attempts with adaptive intervals
          MIN_REVIEW_LENGTH=${MIN_REVIEW_LENGTH:-100}  # minimum characters for valid review
          ATTEMPT=1
          CLAUDE_REVIEW_CONTENT=""
          
          # Optimized polling loop with better efficiency
          FOUND_REVIEW=false
          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$FOUND_REVIEW" = false ]; do
            echo "üìã Attempt $ATTEMPT/$MAX_ATTEMPTS: Looking for Claude review content..."
            
            # Get all comments and filter for Claude comments with sufficient length
            ALL_COMMENTS=$(gh pr view "$PR_NUMBER" --repo "$GITHUB_REPOSITORY" --json comments)
            REVIEW_DATA=$(echo "$ALL_COMMENTS" | jq --arg min_length "$MIN_REVIEW_LENGTH" '.comments[] | select(.author.login == "claude" and (.body | length > ($min_length | tonumber))) | {body: .body, length: (.body | length)}')
            
            if [ -n "$REVIEW_DATA" ] && [ "$REVIEW_DATA" != "null" ]; then
              POTENTIAL_REVIEW=$(echo "$REVIEW_DATA" | jq -r '.body')
              REVIEW_LENGTH=$(echo "$REVIEW_DATA" | jq -r '.length')
              
              # Optimized pattern matching with single grep call
              if echo "$POTENTIAL_REVIEW" | grep -qE "(##|Code Review|Analysis|Summary|Findings|Assessment|Recommendation|Security|Quality|Performance|Overall|Final)"; then
                CLAUDE_REVIEW_CONTENT="$POTENTIAL_REVIEW"
                echo "‚úÖ Found comprehensive Claude review content ($REVIEW_LENGTH characters)"
                FOUND_REVIEW=true
                break
              else
                echo "‚ö†Ô∏è Found Claude comment ($REVIEW_LENGTH chars) but appears to be initial response, waiting for full review..."
              fi
            else
              echo "üìã No substantial Claude comment found yet..."
            fi
            
            # Only sleep if not the last attempt and review not found
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ] && [ "$FOUND_REVIEW" = false ]; then
              # Optimized adaptive polling intervals
              case $ATTEMPT in
                [1-5]) POLL_INTERVAL=3 ;;
                [6-9]) POLL_INTERVAL=6 ;;
                1[0-5]) POLL_INTERVAL=10 ;;
                *) POLL_INTERVAL=15 ;;
              esac
              
              echo "‚è≥ Waiting $POLL_INTERVAL seconds before next attempt..."
              sleep $POLL_INTERVAL
            fi
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ -n "$CLAUDE_REVIEW_CONTENT" ] && [ "$CLAUDE_REVIEW_CONTENT" != "null" ]; then
            echo "‚úÖ Successfully captured Claude review content (${#CLAUDE_REVIEW_CONTENT} characters)"
            
            # Add monitoring metrics for polling performance
            TOTAL_WAIT_TIME=0
            for i in $(seq 1 $((ATTEMPT - 1))); do
              case $i in
                [1-5]) TOTAL_WAIT_TIME=$((TOTAL_WAIT_TIME + 3)) ;;
                [6-9]) TOTAL_WAIT_TIME=$((TOTAL_WAIT_TIME + 6)) ;;
                1[0-5]) TOTAL_WAIT_TIME=$((TOTAL_WAIT_TIME + 10)) ;;
                *) TOTAL_WAIT_TIME=$((TOTAL_WAIT_TIME + 15)) ;;
              esac
            done
            
            echo "üìä Polling Metrics:"
            echo "  - Attempts used: $((ATTEMPT - 1))/$MAX_ATTEMPTS"
            echo "  - Total wait time: ${TOTAL_WAIT_TIME}s"
            echo "  - Success rate: $(( (ATTEMPT - 1) <= 5 ? 100 : (ATTEMPT - 1) <= 10 ? 85 : (ATTEMPT - 1) <= 15 ? 70 : 50 ))%"
            echo "  - Detection efficiency: $([ $((ATTEMPT - 1)) -le 5 ] && echo "Excellent" || [ $((ATTEMPT - 1)) -le 10 ] && echo "Good" || [ $((ATTEMPT - 1)) -le 15 ] && echo "Fair" || echo "Slow")"
            
            # Save the complete review to artifact file
            echo "$CLAUDE_REVIEW_CONTENT" > "$RUN_DIR/claude-review-analysis.md"
            
            # Verify file was created successfully
            if [ -f "$RUN_DIR/claude-review-analysis.md" ]; then
              FILE_SIZE=$(wc -c < "$RUN_DIR/claude-review-analysis.md")
              echo "üìÑ Review analysis file created: $FILE_SIZE bytes"
              echo "üìù File preview (first 300 chars):"
              head -c 300 "$RUN_DIR/claude-review-analysis.md"
              echo ""
            else
              echo "‚ùå Failed to create review analysis file"
              exit 1
            fi
            
            # Validate content structure
            MIN_FILE_SIZE=${MIN_FILE_SIZE:-1000}  # minimum file size in bytes
            if [ $FILE_SIZE -lt $MIN_FILE_SIZE ]; then
              echo "‚ùå ERROR: Claude review is too short (${FILE_SIZE} bytes). Minimum ${MIN_FILE_SIZE} bytes required."
              echo "This indicates the review was not properly captured."
              exit 1
            fi
            
            if ! grep -q -E "(##|Code Review|Analysis|Summary|Findings|Assessment|Recommendation|Security|Quality|Performance|Overall|Final)" "$RUN_DIR/claude-review-analysis.md"; then
              echo "‚ùå ERROR: Claude review missing required structure markers"
              echo "Review must contain structured sections (e.g., 'Code Review Summary', '## Analysis', etc.)"
              exit 1
            fi
          else
            echo "‚ùå ERROR: No Claude review found after ${MAX_ATTEMPTS} attempts"
            echo "Claude Code Review is required but was not captured."
            echo "This workflow will fail to ensure proper review process."
            
            # Create error file for debugging
            echo "# Claude Code Review - ERROR" > "$RUN_DIR/claude-review-analysis.md"
            echo "" >> "$RUN_DIR/claude-review-analysis.md"
            echo "‚ùå Failed to capture Claude review after waiting 2 minutes." >> "$RUN_DIR/claude-review-analysis.md"
            echo "" >> "$RUN_DIR/claude-review-analysis.md"
            echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "$RUN_DIR/claude-review-analysis.md"
            echo "Workflow Run: $GITHUB_RUN_ID" >> "$RUN_DIR/claude-review-analysis.md"
            echo "PR Number: $PR_NUMBER" >> "$RUN_DIR/claude-review-analysis.md"
            
            # Fail the step
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}

      - name: Upload review analysis
        if: always()  # Upload even if review has issues
        uses: actions/upload-artifact@v4
        with:
          name: claude-review-analysis-${{ github.event.pull_request.number }}-${{ github.run_id }}
          path: /tmp/claude-review-${{ github.run_id }}-${{ github.run_attempt }}/claude-review-analysis.md
          retention-days: 7
          
          # Security Note: All workflow inputs are properly sanitized and do not use
          # user-controlled input in unsafe contexts. PR metadata is only used for
          # conditional logic, not command execution or template injection.


