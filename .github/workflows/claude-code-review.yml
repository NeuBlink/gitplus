name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Run on all PR types - no path restrictions to ensure workflow and infrastructure changes are reviewed

jobs:
  claude-review:
    # Skip bot-created PRs since they don't have access to OAuth secrets
    if: github.event.pull_request.user.type != 'Bot'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide comprehensive feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage
            - Architecture and design
            - Documentation quality
            
            **Please structure your review as follows:**
            
            ## Code Review Summary
            
            **Overall Assessment:** [Your overall assessment - Approve, Request Changes, or Comment]
            
            **Key Findings:**
            - [List your main findings here]
            
            **Security Concerns:** [Any security issues you identify]
            
            **Code Quality:** [Assessment of code quality, patterns, best practices]
            
            **Testing:** [Assessment of test coverage and quality]
            
            **Performance:** [Any performance considerations]
            
            **Recommendations:**
            - [Your specific recommendations]
            
            ## Detailed Analysis
            
            [Provide your detailed analysis here - be thorough and specific]
            
            ## Final Recommendation
            
            [Your final recommendation: APPROVE, REQUEST_CHANGES, or COMMENT with clear reasoning]
            
            ---
            
            Be constructive and helpful in your feedback. Provide specific, actionable suggestions for improvement.

          # Optional: Use sticky comments to make Claude reuse comment on subsequent pushes
          use_sticky_comment: true

      - name: Capture Claude review content
        if: always()  # Always run to capture review content
        run: |
          echo "📝 Capturing Claude review content for artifact..."
          
          # Create directory for this workflow run
          RUN_DIR="/tmp/claude-review-${{ github.run_id }}-${{ github.run_attempt }}"
          mkdir -p "$RUN_DIR"
          
          # Get the Claude review comment from the PR
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          echo "🔍 Waiting for Claude's comprehensive review to be posted..."
          
          # Wait longer and poll multiple times for comprehensive review content
          MAX_ATTEMPTS=${MAX_ATTEMPTS:-12}  # 2 minutes total (12 * 10 seconds), configurable via env
          POLL_INTERVAL=${POLL_INTERVAL:-10}  # seconds between attempts, configurable via env
          MIN_REVIEW_LENGTH=${MIN_REVIEW_LENGTH:-100}  # minimum characters for valid review
          ATTEMPT=1
          CLAUDE_REVIEW_CONTENT=""
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "📋 Attempt $ATTEMPT/$MAX_ATTEMPTS: Looking for Claude review content..."
            
            # Look for Claude comments with comprehensive content
            # Get the Claude comment body directly (should be only one)
            # Fixed: Removed tail -1 which was truncating multi-line content
            POTENTIAL_REVIEW=$(gh pr view $PR_NUMBER \
              --repo ${{ github.repository }} \
              --json comments | \
              jq -r ".comments[] | select(.author.login == \"claude\" and (.body | length > $MIN_REVIEW_LENGTH)) | .body")
            
            if [ -n "$POTENTIAL_REVIEW" ] && [ "$POTENTIAL_REVIEW" != "null" ]; then
              # Check if this looks like a comprehensive review with flexible pattern matching
              if echo "$POTENTIAL_REVIEW" | grep -q -E "(##|Code Review|Analysis|Summary|Findings|Assessment|Recommendation|Security|Quality|Performance|Overall|Final)"; then
                CLAUDE_REVIEW_CONTENT="$POTENTIAL_REVIEW"
                echo "✅ Found comprehensive Claude review content (${#CLAUDE_REVIEW_CONTENT} characters)"
                break
              else
                echo "⚠️ Found Claude comment (${#POTENTIAL_REVIEW} chars) but appears to be initial response, waiting for full review..."
              fi
            else
              echo "📋 No substantial Claude comment found yet..."
            fi
            
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "⏳ Waiting $POLL_INTERVAL seconds before next attempt..."
              sleep $POLL_INTERVAL
            fi
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ -n "$CLAUDE_REVIEW_CONTENT" ] && [ "$CLAUDE_REVIEW_CONTENT" != "null" ]; then
            echo "✅ Successfully captured Claude review content (${#CLAUDE_REVIEW_CONTENT} characters)"
            
            # Save the complete review to artifact file
            echo "$CLAUDE_REVIEW_CONTENT" > "$RUN_DIR/claude-review-analysis.md"
            
            # Verify file was created successfully
            if [ -f "$RUN_DIR/claude-review-analysis.md" ]; then
              FILE_SIZE=$(wc -c < "$RUN_DIR/claude-review-analysis.md")
              echo "📄 Review analysis file created: $FILE_SIZE bytes"
              echo "📝 File preview (first 300 chars):"
              head -c 300 "$RUN_DIR/claude-review-analysis.md"
              echo ""
            else
              echo "❌ Failed to create review analysis file"
              exit 1
            fi
            
            # Validate content structure
            MIN_FILE_SIZE=${MIN_FILE_SIZE:-1000}  # minimum file size in bytes
            if [ $FILE_SIZE -lt $MIN_FILE_SIZE ]; then
              echo "❌ ERROR: Claude review is too short (${FILE_SIZE} bytes). Minimum ${MIN_FILE_SIZE} bytes required."
              echo "This indicates the review was not properly captured."
              exit 1
            fi
            
            if ! grep -q -E "(##|Code Review|Analysis|Summary|Findings|Assessment|Recommendation|Security|Quality|Performance|Overall|Final)" "$RUN_DIR/claude-review-analysis.md"; then
              echo "❌ ERROR: Claude review missing required structure markers"
              echo "Review must contain structured sections (e.g., 'Code Review Summary', '## Analysis', etc.)"
              exit 1
            fi
          else
            echo "❌ ERROR: No Claude review found after ${MAX_ATTEMPTS} attempts"
            echo "Claude Code Review is required but was not captured."
            echo "This workflow will fail to ensure proper review process."
            
            # Create error file for debugging
            echo "# Claude Code Review - ERROR" > "$RUN_DIR/claude-review-analysis.md"
            echo "" >> "$RUN_DIR/claude-review-analysis.md"
            echo "❌ Failed to capture Claude review after waiting 2 minutes." >> "$RUN_DIR/claude-review-analysis.md"
            echo "" >> "$RUN_DIR/claude-review-analysis.md"
            echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> "$RUN_DIR/claude-review-analysis.md"
            echo "Workflow Run: ${{ github.run_id }}" >> "$RUN_DIR/claude-review-analysis.md"
            echo "PR Number: $PR_NUMBER" >> "$RUN_DIR/claude-review-analysis.md"
            
            # Fail the step
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload review analysis
        if: always()  # Upload even if review has issues
        uses: actions/upload-artifact@v4
        with:
          name: claude-review-analysis-${{ github.event.pull_request.number }}-${{ github.run_id }}
          path: /tmp/claude-review-${{ github.run_id }}-${{ github.run_attempt }}/claude-review-analysis.md
          retention-days: 7
          
          # Security Note: All workflow inputs are properly sanitized and do not use
          # user-controlled input in unsafe contexts. PR metadata is only used for
          # conditional logic, not command execution or template injection.


