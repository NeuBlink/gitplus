name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Run on all PR types - no path restrictions to ensure workflow and infrastructure changes are reviewed

jobs:
  claude-review:
    # Skip bot-created PRs since they don't have access to OAuth secrets
    if: github.event.pull_request.user.type != 'Bot'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Required to post trigger comment
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Trigger Claude Review
        run: |
          echo "🤖 Triggering automated Claude code review..."
          gh pr comment ${{ github.event.pull_request.number }} --body "@claude-auto-review
          
          Please perform a comprehensive code review of this pull request using the structured format specified in the workflow configuration."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Configure for automated reviews
          trigger_phrase: "@claude-auto-review"
          use_sticky_comment: true
          
          # Custom instructions for comprehensive reviews
          custom_instructions: |
            You are performing an automated code review for a CI/CD pipeline. Your review will be captured by automated systems for merge decisions.
            
            **CRITICAL REQUIREMENTS:**
            1. Use EXACTLY this format for your response
            2. Fill in ALL sections with actual content (no placeholders)
            3. Be thorough and specific in your analysis
            4. This review will be used by automated merge decision systems
            
            **Required Response Format:**
            
            # Code Review Summary
            
            **Overall Assessment:** [Approve/Request Changes/Comment]
            
            **Key Findings:**
            - [List specific findings - be detailed]
            - [Include any issues or concerns you identify]
            - [Note positive aspects of the code]
            
            **Security Concerns:** [Detailed security analysis or "None identified"]
            
            **Code Quality:** [Assessment of patterns, style, maintainability]
            
            **Testing:** [Analysis of test coverage and quality]
            
            **Performance:** [Performance considerations or "No concerns"]
            
            ## Detailed Analysis
            
            **Files Changed:**
            [Analyze each file with specific feedback]
            
            **Code Patterns:**
            [Comment on coding patterns and architecture]
            
            **Potential Issues:**
            [List bugs, edge cases, or concerns]
            
            **Best Practices:**
            [Adherence to coding standards and best practices]
            
            ## Recommendations
            
            - [Specific, actionable recommendations]
            - [Required changes and improvement suggestions]
            - [If no changes needed, state "No changes required"]
            
            ## Final Recommendation
            
            **Decision:** [APPROVE/REQUEST_CHANGES/COMMENT]
            **Reasoning:** [Clear explanation of your decision]
            **Merge Safety:** [Safety assessment and any blockers]
            
            Remember: This is an automated review for CI/CD. Be comprehensive and use the exact format above.

      - name: Capture Claude review content
        if: always()  # Always run to capture review content
        run: |
          echo "📝 Capturing Claude review content for artifact..."
          
          # Create directory for this workflow run
          RUN_DIR="/tmp/claude-review-${{ github.run_id }}-${{ github.run_attempt }}"
          mkdir -p "$RUN_DIR"
          
          # Get the Claude review comment from the PR
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          echo "🔍 Waiting for Claude's comprehensive review to be posted..."
          
          # Wait longer and poll multiple times for comprehensive review content
          MAX_ATTEMPTS=12  # 2 minutes total (12 * 10 seconds)
          ATTEMPT=1
          CLAUDE_REVIEW_CONTENT=""
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "📋 Attempt $ATTEMPT/$MAX_ATTEMPTS: Looking for Claude review content..."
            
            # Look for Claude comments with comprehensive content (contains key review markers)
            POTENTIAL_REVIEW=$(gh pr view $PR_NUMBER \
              --repo ${{ github.repository }} \
              --json comments \
              --jq '.comments[] | select(.author.login == "claude" and (.body | contains("Code Review") or contains("Analysis") or contains("## ") or contains("**") or length > 200)) | .body' \
              | tail -1)
            
            if [ -n "$POTENTIAL_REVIEW" ] && [ "$POTENTIAL_REVIEW" != "null" ]; then
              # Check if this looks like a comprehensive review (not just a checkbox)
              if echo "$POTENTIAL_REVIEW" | grep -q -E "(Code Review|Analysis|Security|Quality|Performance|## |Review Summary|Key Findings)"; then
                CLAUDE_REVIEW_CONTENT="$POTENTIAL_REVIEW"
                echo "✅ Found comprehensive Claude review content (${#CLAUDE_REVIEW_CONTENT} characters)"
                break
              else
                echo "⚠️ Found Claude comment (${#POTENTIAL_REVIEW} chars) but appears to be initial response, waiting for full review..."
              fi
            else
              echo "📋 No substantial Claude comment found yet..."
            fi
            
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "⏳ Waiting 10 seconds before next attempt..."
              sleep 10
            fi
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ -n "$CLAUDE_REVIEW_CONTENT" ] && [ "$CLAUDE_REVIEW_CONTENT" != "null" ]; then
            echo "✅ Successfully captured Claude review content (${#CLAUDE_REVIEW_CONTENT} characters)"
            
            # Save the complete review to artifact file
            echo "$CLAUDE_REVIEW_CONTENT" > "$RUN_DIR/claude-review-analysis.md"
            
            # Verify file was created successfully
            if [ -f "$RUN_DIR/claude-review-analysis.md" ]; then
              FILE_SIZE=$(wc -c < "$RUN_DIR/claude-review-analysis.md")
              echo "📄 Review analysis file created: $FILE_SIZE bytes"
              echo "📝 File preview (first 300 chars):"
              head -c 300 "$RUN_DIR/claude-review-analysis.md"
              echo ""
              echo "..."
            else
              echo "❌ Failed to create review analysis file"
            fi
          else
            echo "⚠️ No comprehensive Claude review found after $MAX_ATTEMPTS attempts"
            echo "🔍 Creating detailed fallback content with available information..."
            
            # Create a more informative fallback
            echo "# Claude Code Review - Comprehensive Analysis Not Captured" > "$RUN_DIR/claude-review-analysis.md"
            echo "" >> "$RUN_DIR/claude-review-analysis.md"
            echo "Status: Claude's comprehensive review content was not successfully captured from PR comments." >> "$RUN_DIR/claude-review-analysis.md"
            echo "" >> "$RUN_DIR/claude-review-analysis.md"
            echo "This indicates a workflow timing or content capture issue." >> "$RUN_DIR/claude-review-analysis.md"
            echo "Recommended: MANUAL_APPROVAL for human verification when review content is missing." >> "$RUN_DIR/claude-review-analysis.md"
            
            echo "📄 Fallback content created with guidance for merge decision workflow"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload review analysis
        if: always()  # Upload even if review has issues
        uses: actions/upload-artifact@v4
        with:
          name: claude-review-analysis-${{ github.event.pull_request.number }}-${{ github.run_id }}
          path: /tmp/claude-review-${{ github.run_id }}-${{ github.run_attempt }}/claude-review-analysis.md
          retention-days: 7
          
          # Security Note: All workflow inputs are properly sanitized and do not use
          # user-controlled input in unsafe contexts. PR metadata is only used for
          # conditional logic, not command execution or template injection.

