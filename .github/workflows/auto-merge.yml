name: Auto Merge

on:
  workflow_run:
    workflows: ["Merge Decision"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    steps:
      - name: Get PR number from merge decision workflow
        id: get-pr
        run: |
          # Get the PR number from the workflow run that triggered this
          PR_NUMBER=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }} \
            --jq '.pull_requests[0].number // empty')
          
          if [ -z "$PR_NUMBER" ]; then
            echo "‚ùå Could not determine PR number from workflow run"
            exit 1
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "üîç Processing PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check merge decision status
        id: check-decision
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          echo "üîç Checking merge decision for PR #$PR_NUMBER"
          
          # Get the merge-decision status from the commit status checks
          MERGE_STATUS=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER \
            --jq '.head.sha as $sha | $sha' | xargs -I {} \
            gh api repos/${{ github.repository }}/commits/{}/statuses \
            --jq '.[] | select(.context == "merge-decision") | .state' | head -1)
          
          echo "üìä Merge decision status: $MERGE_STATUS"
          
          if [ "$MERGE_STATUS" = "success" ]; then
            echo "‚úÖ Merge decision approved"
            echo "should_merge=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Merge decision not approved (status: $MERGE_STATUS)"
            echo "should_merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get PR details to check if it's mergeable
          PR_DATA=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} \
            --json mergeable,mergeStateStatus,isDraft,state)
          
          MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable')
          MERGE_STATE=$(echo "$PR_DATA" | jq -r '.mergeStateStatus')
          IS_DRAFT=$(echo "$PR_DATA" | jq -r '.isDraft')
          PR_STATE=$(echo "$PR_DATA" | jq -r '.state')
          
          echo "üìã PR Status:"
          echo "  - Mergeable: $MERGEABLE"
          echo "  - Merge State: $MERGE_STATE"
          echo "  - Is Draft: $IS_DRAFT"
          echo "  - State: $PR_STATE"
          
          # Check if PR is ready to merge
          if [ "$PR_STATE" != "OPEN" ]; then
            echo "‚ùå PR is not open (state: $PR_STATE)"
            echo "should_merge=false" >> $GITHUB_OUTPUT
          elif [ "$IS_DRAFT" = "true" ]; then
            echo "‚ùå PR is a draft"
            echo "should_merge=false" >> $GITHUB_OUTPUT
          elif [ "$MERGEABLE" != "MERGEABLE" ]; then
            echo "‚ùå PR is not mergeable (status: $MERGEABLE)"
            echo "should_merge=false" >> $GITHUB_OUTPUT
          elif [ "$MERGE_STATE" != "CLEAN" ]; then
            echo "‚ùå PR merge state is not clean (status: $MERGE_STATE)"
            echo "should_merge=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ PR is ready for auto-merge"
            echo "should_merge=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Claude's merge recommendation
        id: get-recommendation
        if: steps.check-decision.outputs.should_merge == 'true'
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          echo "üîç Getting Claude's merge recommendation for PR #$PR_NUMBER"
          
          # Look for Claude's latest comment with merge decision
          CLAUDE_COMMENT=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} \
            --json comments --jq '.comments[] | select(.author.login == "claude" and (.body | contains("recommended_action"))) | .body' \
            | tail -1)
          
          if [ -z "$CLAUDE_COMMENT" ] || [ "$CLAUDE_COMMENT" = "null" ]; then
            echo "‚ö†Ô∏è No Claude recommendation found, skipping auto-merge"
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract recommended action from JSON in comment
          RECOMMENDED_ACTION=$(echo "$CLAUDE_COMMENT" | grep -o '"recommended_action":[[:space:]]*"[^"]*"' | cut -d'"' -f4)
          
          echo "üéØ Claude's recommendation: $RECOMMENDED_ACTION"
          
          if [ "$RECOMMENDED_ACTION" = "auto-merge" ]; then
            echo "‚úÖ Claude recommends auto-merge"
            echo "auto_merge=true" >> $GITHUB_OUTPUT
          else
            echo "üìã Claude recommends: $RECOMMENDED_ACTION (not auto-merge)"
            echo "auto_merge=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Perform auto-merge
        if: steps.check-decision.outputs.should_merge == 'true' && steps.get-recommendation.outputs.auto_merge == 'true'
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          echo "üöÄ Auto-merging PR #$PR_NUMBER"
          
          # Get PR details for merge message
          PR_DATA=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} \
            --json title,author,headRefName)
          
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
          HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          
          # Check if this is a Release Please PR (different merge strategy)
          if [[ "$PR_AUTHOR" == "app/github-actions" ]] && [[ "$HEAD_BRANCH" == release-please--* ]]; then
            echo "üîÑ Detected Release Please PR, using squash merge"
            MERGE_METHOD="squash"
          else
            echo "üîÑ Regular PR, using squash merge"
            MERGE_METHOD="squash"
          fi
          
          # Perform the merge
          if gh pr merge $PR_NUMBER --repo ${{ github.repository }} --$MERGE_METHOD --auto; then
            echo "‚úÖ Successfully enabled auto-merge for PR #$PR_NUMBER"
            
            # Add a comment about the auto-merge
            gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
              --body "ü§ñ **Auto-merge enabled** by Claude AI merge decision

‚úÖ **Merge Decision**: Approved  
üöÄ **Action**: Auto-merge activated  
üìã **Method**: $MERGE_METHOD  

This PR will be automatically merged once all required status checks pass."
            
          else
            echo "‚ùå Failed to enable auto-merge for PR #$PR_NUMBER"
            
            # Try a direct merge if auto-merge failed
            echo "üîÑ Attempting direct merge..."
            if gh pr merge $PR_NUMBER --repo ${{ github.repository }} --$MERGE_METHOD; then
              echo "‚úÖ Successfully merged PR #$PR_NUMBER directly"
              
              gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
                --body "ü§ñ **PR Merged** by Claude AI automation

‚úÖ **Merge Decision**: Approved  
üöÄ **Action**: Direct merge completed  
üìã **Method**: $MERGE_METHOD  

This PR has been automatically merged based on Claude's analysis."
            else
              echo "‚ùå Direct merge also failed for PR #$PR_NUMBER"
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle merge failure
        if: failure()
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          echo "‚ùå Auto-merge failed for PR #$PR_NUMBER"
          
          # Add comment about the failure
          gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
            --body "ü§ñ **Auto-merge Failed**

‚ùå **Issue**: Automatic merge could not be completed  
üîç **Next Steps**: Manual review and merge required  
üìã **Reason**: Check the auto-merge workflow logs for details  

Despite Claude AI approving this PR, automatic merging encountered an issue. Please review and merge manually if appropriate." || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}