name: Release Please Post-Processing

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  update-package-lock:
    # Only run on Release Please PRs with additional safety checks
    if: |
      github.event.pull_request.user.login == 'app/github-actions' &&
      github.event.pull_request.user.type == 'Bot' &&
      startsWith(github.event.pull_request.head.ref, 'release-please--') &&
      github.event.pull_request.base.ref == 'main'
    
    runs-on: ubuntu-latest
    environment: release-please
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1
          
      - name: Validate Release Please PR
        run: |
          echo "üîç Validating Release Please PR"
          
          # Use common validation script
          source .github/scripts/validate-pr-metadata.sh
          
          # Validate PR metadata (allow GitHub Apps)
          validate_pr_metadata "$PR_TITLE" "$PR_AUTHOR" "$HEAD_BRANCH" "$BASE_BRANCH" "true"
          
          # Safely print user-controlled variables to prevent command injection
          safe_print "PR Title" "$PR_TITLE"
          safe_print "PR Author" "$PR_AUTHOR"
          safe_print "PR Author Type" "$PR_AUTHOR_TYPE"
          safe_print "Head Branch" "$HEAD_BRANCH"
          safe_print "Base Branch" "$BASE_BRANCH"
          
          # SECURITY NOTE: All user-controlled inputs (PR title, branch names) are safely
          # passed through environment variables to prevent code injection attacks.
          # This is the secure pattern recommended by GitHub Actions security guides.
          
          # Additional safety checks
          if [ "${PR_AUTHOR}" != "app/github-actions" ]; then
            echo "‚ùå Error: PR author is not app/github-actions"
            exit 1
          fi
          
          if [ "${PR_AUTHOR_TYPE}" != "Bot" ]; then
            echo "‚ùå Error: PR author type is not Bot"
            exit 1
          fi
          
          if [ "${BASE_BRANCH}" != "main" ]; then
            echo "‚ùå Error: PR base branch is not main"
            exit 1
          fi
          
          if [[ ! "${HEAD_BRANCH}" =~ ^release-please--[a-zA-Z0-9._-]{1,50}$ ]]; then
            echo "‚ùå Error: PR head branch does not match release-please pattern"
            exit 1
          fi
          
          echo "‚úÖ Release Please PR validation passed"
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_AUTHOR_TYPE: ${{ github.event.pull_request.user.type }}
          HEAD_BRANCH: ${{ github.event.pull_request.head.ref }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}

      - name: Checkout Release Please branch
        uses: actions/checkout@v4
        with:
          # Use specific SHA to avoid ref manipulation
          ref: ${{ github.event.pull_request.head.sha }}
          # Use minimal permissions token
          token: ${{ secrets.GITHUB_TOKEN }}
          # Need fetch depth > 1 to compare with main branch
          fetch-depth: 50
          # Don't persist credentials
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Check if package.json version changed
        id: version-check
        run: |
          echo "üîç Checking if package.json version changed"
          
          # Get the version from the current branch (Release Please branch)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get the version from main branch
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8')).version")
          echo "Main version: $MAIN_VERSION"
          
          if [ "$CURRENT_VERSION" != "$MAIN_VERSION" ]; then
            echo "‚úÖ Version changed from $MAIN_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "old_version=$MAIN_VERSION" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è Version not changed"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package-lock.json
        if: steps.version-check.outputs.version_changed == 'true'
        run: |
          echo "üîÑ Updating package-lock.json for version ${NEW_VERSION}"
          
          # Remove existing node_modules and package-lock.json to ensure clean install
          rm -rf node_modules package-lock.json
          
          # Install dependencies to generate new package-lock.json
          npm install
          
          echo "‚úÖ Generated new package-lock.json"

      - name: Check for changes
        if: steps.version-check.outputs.version_changed == 'true'
        id: changes-check
        run: |
          if git diff --quiet package-lock.json; then
            echo "‚ÑπÔ∏è No changes to package-lock.json"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ package-lock.json has changes"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit updated package-lock.json
        if: |
          steps.version-check.outputs.version_changed == 'true' && 
          steps.changes-check.outputs.has_changes == 'true'
        run: |
          echo "üìù Committing updated package-lock.json"
          
          # Configure git with bot identity
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Configure git to use token for authentication
          git config url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          
          # Add and commit the updated package-lock.json
          git add package-lock.json
          git commit -m "chore: update package-lock.json for version ${NEW_VERSION}
          
          - Updated package-lock.json to match package.json version ${NEW_VERSION}
          - This ensures consistent dependency resolution across environments
          
          Co-authored-by: release-please[bot] <55107282+release-please[bot]@users.noreply.github.com>"
          
          # Push the changes back to the Release Please branch using safe reference
          git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "HEAD:${HEAD_BRANCH}"
          
          echo "‚úÖ Successfully committed and pushed package-lock.json update"
        env:
          NEW_VERSION: ${{ steps.version-check.outputs.new_version }}
          HEAD_BRANCH: ${{ github.event.pull_request.head.ref }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Add PR comment about package-lock update
        if: |
          steps.version-check.outputs.version_changed == 'true' && 
          steps.changes-check.outputs.has_changes == 'true'
        run: |
          gh pr comment "${PR_NUMBER}" \
            --repo "${GITHUB_REPOSITORY}" \
            --body "ü§ñ **Package Lock Updated**\\n\\nüì¶ **Version Change**: ${OLD_VERSION} ‚Üí ${NEW_VERSION}\\nüîÑ **Action**: Updated \\\`package-lock.json\\\` to match new version\\n‚úÖ **Status**: Automatically committed to this Release Please PR\\n\\nThe package lock file has been updated to ensure consistent dependency resolution with the new version."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          OLD_VERSION: ${{ steps.version-check.outputs.old_version }}
          NEW_VERSION: ${{ steps.version-check.outputs.new_version }}