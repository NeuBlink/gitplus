name: Release Please Post-Processing

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  update-package-lock:
    # Only run on Release Please PRs
    if: |
      github.event.pull_request.user.login == 'app/github-actions' &&
      startsWith(github.event.pull_request.head.ref, 'release-please--')
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Detect Release Please PR
        run: |
          echo "🔍 Processing Release Please PR"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}"

      - name: Checkout Release Please branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Check if package.json version changed
        id: version-check
        run: |
          echo "🔍 Checking if package.json version changed"
          
          # Get the version from the current branch (Release Please branch)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get the version from main branch
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8')).version")
          echo "Main version: $MAIN_VERSION"
          
          if [ "$CURRENT_VERSION" != "$MAIN_VERSION" ]; then
            echo "✅ Version changed from $MAIN_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "old_version=$MAIN_VERSION" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Version not changed"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package-lock.json
        if: steps.version-check.outputs.version_changed == 'true'
        run: |
          echo "🔄 Updating package-lock.json for version ${{ steps.version-check.outputs.new_version }}"
          
          # Remove existing node_modules and package-lock.json to ensure clean install
          rm -rf node_modules package-lock.json
          
          # Install dependencies to generate new package-lock.json
          npm install
          
          echo "✅ Generated new package-lock.json"

      - name: Check for changes
        if: steps.version-check.outputs.version_changed == 'true'
        id: changes-check
        run: |
          if git diff --quiet package-lock.json; then
            echo "ℹ️ No changes to package-lock.json"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "✅ package-lock.json has changes"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit updated package-lock.json
        if: |
          steps.version-check.outputs.version_changed == 'true' && 
          steps.changes-check.outputs.has_changes == 'true'
        run: |
          echo "📝 Committing updated package-lock.json"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Add and commit the updated package-lock.json
          git add package-lock.json
          git commit -m "chore: update package-lock.json for version ${{ steps.version-check.outputs.new_version }}

- Updated package-lock.json to match package.json version ${{ steps.version-check.outputs.new_version }}
- This ensures consistent dependency resolution across environments

Co-authored-by: release-please[bot] <55107282+release-please[bot]@users.noreply.github.com>"
          
          # Push the changes back to the Release Please branch
          git push origin ${{ github.event.pull_request.head.ref }}
          
          echo "✅ Successfully committed and pushed package-lock.json update"

      - name: Add PR comment about package-lock update
        if: |
          steps.version-check.outputs.version_changed == 'true' && 
          steps.changes-check.outputs.has_changes == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --repo ${{ github.repository }} \
            --body "🤖 **Package Lock Updated**

📦 **Version Change**: ${{ steps.version-check.outputs.old_version }} → ${{ steps.version-check.outputs.new_version }}  
🔄 **Action**: Updated \`package-lock.json\` to match new version  
✅ **Status**: Automatically committed to this Release Please PR  

The package lock file has been updated to ensure consistent dependency resolution with the new version."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}