name: Merge Decision

on:
  # Run as a required status check on every PR
  pull_request:
    types: [opened, synchronize, reopened]

# Security Note: This workflow uses PR metadata (numbers, SHAs) for status reporting
# but does not execute user-controlled content. All checkouts use default refs,
# and PR data is only used in safe contexts (API calls, conditional logic).

permissions:
  contents: write  # Required for merging PRs
  pull-requests: write
  issues: read
  actions: read
  checks: read
  statuses: write  # Required for creating commit status checks
  id-token: write

jobs:
  wait-for-checks:
    runs-on: ubuntu-latest
    outputs:
      all_checks_complete: ${{ steps.check-status.outputs.all_complete }}
      pr_number: ${{ steps.get-pr.outputs.pr_number }}
    steps:
      - name: Get PR number
        id: get-pr
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Wait for other checks to complete
        id: check-status
        run: |
          PR_NUMBER=${{ steps.get-pr.outputs.pr_number }}
          echo "Checking status of PR #$PR_NUMBER"
          
          # Wait up to 30 minutes for checks to complete
          MAX_ATTEMPTS=60
          SLEEP_TIME=30
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i of $MAX_ATTEMPTS"
            
            # Get all check runs for this PR
            CHECKS=$(gh pr checks $PR_NUMBER --repo ${{ github.repository }} --json name,state)
            
            # Get all available checks and determine what's actually running
            AVAILABLE_CHECKS=$(echo "$CHECKS" | jq -r '.[].name' | sort)
            echo "Available checks: $(echo "$AVAILABLE_CHECKS" | tr '\n' ', ' | sed 's/,$//')"
            
            # Define preferred checks (in priority order) but be flexible about what exists
            PREFERRED_CHECKS=("claude-review" "test (20.x)" "security" "validate-pr" "CI / test (20.x)")
            REQUIRED_CHECKS=()
            
            # Build list of required checks based on what's actually available
            for check in "${PREFERRED_CHECKS[@]}"; do
              if echo "$AVAILABLE_CHECKS" | grep -q "^$check$"; then
                REQUIRED_CHECKS+=("$check")
              fi
            done
            
            # If no preferred checks are available, wait for any checks that are running
            if [ ${#REQUIRED_CHECKS[@]} -eq 0 ]; then
              echo "No preferred checks found, waiting for any available checks to complete..."
              while IFS= read -r check; do
                REQUIRED_CHECKS+=("$check")
              done <<< "$AVAILABLE_CHECKS"
            fi
            
            echo "Required checks: ${REQUIRED_CHECKS[*]}"
            
            ALL_COMPLETE=true
            ALL_SUCCESS=true
            
            for check in "${REQUIRED_CHECKS[@]}"; do
              CHECK_STATE=$(echo "$CHECKS" | jq -r ".[] | select(.name == \"$check\") | .state // \"not_found\"")
              
              echo "  $check: state=$CHECK_STATE"
              
              if [ "$CHECK_STATE" = "not_found" ] || [ "$CHECK_STATE" = "PENDING" ] || [ "$CHECK_STATE" = "QUEUED" ] || [ "$CHECK_STATE" = "IN_PROGRESS" ]; then
                ALL_COMPLETE=false
              fi
              
              if [ "$CHECK_STATE" != "SUCCESS" ] && [ "$CHECK_STATE" != "not_found" ]; then
                ALL_SUCCESS=false
              fi
            done
            
            if [ "$ALL_COMPLETE" = "true" ]; then
              echo "All required checks have completed"
              echo "all_complete=true" >> $GITHUB_OUTPUT
              echo "all_success=$ALL_SUCCESS" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Don't sleep on the last attempt
            if [ $i -lt $MAX_ATTEMPTS ]; then
              echo "Waiting $SLEEP_TIME seconds before next check..."
              sleep $SLEEP_TIME
            fi
          done
          
          echo "Timeout waiting for checks to complete"
          echo "all_complete=false" >> $GITHUB_OUTPUT
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-decision:
    runs-on: ubuntu-latest
    needs: wait-for-checks
    if: needs.wait-for-checks.outputs.all_checks_complete == 'true'
    outputs:
      DECISION: ${{ steps.parse-decision.outputs.DECISION }}
      REASON: ${{ steps.parse-decision.outputs.REASON }}
      RECOMMENDED_ACTION: ${{ steps.parse-decision.outputs.RECOMMENDED_ACTION }}
    
    steps:
      - name: Gather PR context
        id: pr-context
        run: |
          PR_NUMBER=${{ needs.wait-for-checks.outputs.pr_number }}
          echo "Gathering comprehensive PR context for PR #$PR_NUMBER..."
          
          # Get all check results
          echo "CHECK_RESULTS<<EOF" >> $GITHUB_OUTPUT
          gh pr checks $PR_NUMBER \
            --repo ${{ github.repository }} \
            --json name,state,conclusion \
            | jq -r '.[] | "\(.name): \(.state) (\(.conclusion // "pending"))"' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get PR metadata
          PR_DATA=$(gh pr view $PR_NUMBER \
            --repo ${{ github.repository }} \
            --json title,body,mergeable,mergeStateStatus,isDraft,author,baseRefName,headRefName,commits)
          
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "PR_MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable')" >> $GITHUB_OUTPUT
          echo "PR_MERGE_STATE=$(echo "$PR_DATA" | jq -r '.mergeStateStatus')" >> $GITHUB_OUTPUT
          echo "PR_IS_DRAFT=$(echo "$PR_DATA" | jq -r '.isDraft')" >> $GITHUB_OUTPUT
          echo "PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')" >> $GITHUB_OUTPUT
          echo "BASE_BRANCH=$(echo "$PR_DATA" | jq -r '.baseRefName')" >> $GITHUB_OUTPUT
          echo "HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')" >> $GITHUB_OUTPUT
          
          # Check if this is a Release Please PR
          AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
          HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          IS_RELEASE_PLEASE="false"
          if [[ "$AUTHOR" == "app/github-actions" ]] && [[ "$HEAD_BRANCH" == release-please--* ]]; then
            IS_RELEASE_PLEASE="true"
            echo "Detected Release Please PR"
          fi
          echo "IS_RELEASE_PLEASE=$IS_RELEASE_PLEASE" >> $GITHUB_OUTPUT
          
          # Get detailed CI check information
          echo "üîç Gathering detailed CI check information..."
          
          # Get all checks summary
          ALL_CHECKS=$(gh pr checks $PR_NUMBER --repo ${{ github.repository }} --json name,state)
          
          # Key check states - be flexible about check names
          TEST_RESULT=$(echo "$ALL_CHECKS" | jq -r '.[] | select(.name == "test (20.x)" or .name == "CI / test (20.x)") | .state' | head -1)
          TEST_RESULT=${TEST_RESULT:-"PENDING"}
          
          SECURITY_RESULT=$(echo "$ALL_CHECKS" | jq -r '.[] | select(.name == "security" or .name == "CI / security") | .state' | head -1)
          SECURITY_RESULT=${SECURITY_RESULT:-"PENDING"}
          
          CLAUDE_RESULT=$(echo "$ALL_CHECKS" | jq -r '.[] | select(.name == "claude-review") | .state' | head -1)
          CLAUDE_RESULT=${CLAUDE_RESULT:-"PENDING"}
          
          VALIDATE_RESULT=$(echo "$ALL_CHECKS" | jq -r '.[] | select(.name == "validate-pr") | .state' | head -1)
          VALIDATE_RESULT=${VALIDATE_RESULT:-"PENDING"}
          
          # Handle Claude review content - skip for Release Please PRs
          if [ "$IS_RELEASE_PLEASE" = "true" ]; then
            echo "ü§ñ Release Please PR detected - skipping Claude review requirement"
            echo "CLAUDE_REVIEW_CONTENT=Release Please PR: Claude review bypassed for automated release" >> $GITHUB_OUTPUT
            CLAUDE_RESULT="SKIPPED_RELEASE"
          elif [ "$CLAUDE_RESULT" = "SUCCESS" ]; then
            echo "üîç Loading Claude review from artifact file..."
            
            # Check if download step found the analysis file
            if [ "${{ steps.download-review.outputs.analysis_available }}" = "true" ]; then
              ANALYSIS_FILE="${{ steps.download-review.outputs.analysis_path }}"
              echo "‚úÖ Found Claude review analysis file at: $ANALYSIS_FILE"
              CLAUDE_REVIEW_CONTENT=$(cat "$ANALYSIS_FILE")
              FILE_SIZE=$(wc -c < "$ANALYSIS_FILE")
              echo "üìÑ Review file size: $FILE_SIZE characters"
              echo "üìù Review preview: ${CLAUDE_REVIEW_CONTENT:0:200}..."
              
              echo "CLAUDE_REVIEW_CONTENT<<EOF" >> $GITHUB_OUTPUT
              echo "$CLAUDE_REVIEW_CONTENT" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Claude review file not found, falling back to comment parsing..."
              
              # Fallback: Get the most substantial Claude comment
              CLAUDE_REVIEW_COMMENT=$(gh pr view $PR_NUMBER \
                --repo ${{ github.repository }} \
                --json comments \
                --jq '.comments[] | select(.author.login == "claude" and (.body | length > 100)) | .body' \
                | tail -n 1)
              
              if [ -n "$CLAUDE_REVIEW_COMMENT" ] && [ "$CLAUDE_REVIEW_COMMENT" != "null" ]; then
                echo "‚úÖ Found Claude review comment as fallback (${#CLAUDE_REVIEW_COMMENT} characters)"
                echo "CLAUDE_REVIEW_CONTENT<<EOF" >> $GITHUB_OUTPUT
                echo "$CLAUDE_REVIEW_COMMENT" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
              else
                echo "‚ùå No Claude review content available"
                echo "CLAUDE_REVIEW_CONTENT=‚ö†Ô∏è Claude review content not provided in context. This may be due to: 1) Claude review workflow still running, 2) Missing artifact file, 3) No substantial Claude comments found. This is common for simple PRs and does not indicate code quality issues." >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "‚ö†Ô∏è Claude review not successful, no review content available"
            echo "CLAUDE_REVIEW_CONTENT=Claude review check did not complete successfully (status: $CLAUDE_RESULT)" >> $GITHUB_OUTPUT
          fi
          
          # Count passed/failed checks (exclude SKIPPED and null checks from total)
          PASSED_CHECKS=$(echo "$ALL_CHECKS" | jq -r '.[] | select(.state == "SUCCESS") | .name' | wc -l)
          FAILED_CHECKS=$(echo "$ALL_CHECKS" | jq -r '.[] | select(.state == "FAILURE") | .name' | wc -l)
          # Only count SUCCESS and FAILURE checks in total (exclude SKIPPED, null, etc.)
          TOTAL_CHECKS=$(echo "$ALL_CHECKS" | jq -r '.[] | select(.state == "SUCCESS" or .state == "FAILURE") | .name' | wc -l)
          
          # Get failed check names if any
          FAILED_CHECK_NAMES=$(echo "$ALL_CHECKS" | jq -r '.[] | select(.state == "FAILURE") | .name' | tr '\n' ', ' | sed 's/,$//')
          
          echo "TEST_CONCLUSION=$TEST_RESULT" >> $GITHUB_OUTPUT
          echo "SECURITY_CONCLUSION=$SECURITY_RESULT" >> $GITHUB_OUTPUT
          echo "CLAUDE_REVIEW_CONCLUSION=$CLAUDE_RESULT" >> $GITHUB_OUTPUT
          echo "VALIDATE_CONCLUSION=$VALIDATE_RESULT" >> $GITHUB_OUTPUT
          echo "CHECKS_SUMMARY=$PASSED_CHECKS/$TOTAL_CHECKS checks passed" >> $GITHUB_OUTPUT
          echo "FAILED_CHECKS=$FAILED_CHECK_NAMES" >> $GITHUB_OUTPUT
          
          echo "üìä CI Summary: $PASSED_CHECKS passed, $FAILED_CHECKS failed out of $TOTAL_CHECKS total"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate Release Please PR security
        id: validate-release
        if: steps.pr-context.outputs.IS_RELEASE_PLEASE == 'true'
        run: |
          echo "üîí Validating Release Please PR security..."
          PR_NUMBER=${{ steps.pr-context.outputs.PR_NUMBER }}
          
          # Security validation: Strict author verification
          AUTHOR="${{ steps.pr-context.outputs.PR_AUTHOR }}"
          HEAD_BRANCH="${{ steps.pr-context.outputs.HEAD_BRANCH }}"
          
          if [ "$AUTHOR" != "app/github-actions" ]; then
            echo "‚ùå SECURITY VIOLATION: Invalid Release Please author: $AUTHOR"
            echo "release_validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [[ ! "$HEAD_BRANCH" =~ ^release-please--branches--main--components-- ]]; then
            echo "‚ùå SECURITY VIOLATION: Invalid Release Please branch pattern: $HEAD_BRANCH"
            echo "release_validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate file changes - only allow safe release files
          echo "üîç Validating changed files..."
          CHANGED_FILES=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json files --jq '.files[].path')
          
          ALLOWED_FILES=(
            "package.json"
            "package-lock.json" 
            "CHANGELOG.md"
            "VERSION"
            "version.txt"
            ".release-please-manifest.json"
          )
          
          VALIDATION_PASSED=true
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "  Checking file: $file"
              
              # Check if file is in allowed list
              FILE_ALLOWED=false
              for allowed_file in "${ALLOWED_FILES[@]}"; do
                if [ "$file" = "$allowed_file" ]; then
                  FILE_ALLOWED=true
                  break
                fi
              done
              
              if [ "$FILE_ALLOWED" = "false" ]; then
                echo "‚ùå SECURITY VIOLATION: Unauthorized file change in Release Please PR: $file"
                VALIDATION_PASSED=false
              else
                echo "  ‚úÖ Authorized file: $file"
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          if [ "$VALIDATION_PASSED" = "true" ]; then
            echo "‚úÖ Release Please PR validation passed"
            echo "release_validation_passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Release Please PR validation failed"
            echo "release_validation_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Claude review analysis
        id: download-review
        if: steps.pr-context.outputs.IS_RELEASE_PLEASE != 'true'
        run: |
          # Create unique directory for this merge decision run
          MERGE_RUN_DIR="/tmp/merge-decision-${{ github.run_id }}-${{ github.run_attempt }}"
          mkdir -p "$MERGE_RUN_DIR"
          
          # Try to download the most recent Claude review artifact
          PR_NUMBER=${{ steps.pr-context.outputs.PR_NUMBER }}
          echo "Searching for Claude review artifacts for PR #$PR_NUMBER"
          
          # Get list of artifacts and find the most recent Claude review
          ARTIFACT_NAME=$(gh api repos/${{ github.repository }}/actions/artifacts \
            --jq ".artifacts[] | select(.name | startswith(\"claude-review-analysis-$PR_NUMBER-\")) | .name" \
            | head -1)
          
          if [ -n "$ARTIFACT_NAME" ]; then
            echo "Found artifact: $ARTIFACT_NAME"
            gh run download --repo ${{ github.repository }} --name "$ARTIFACT_NAME" --dir "$MERGE_RUN_DIR/"
            
            # Look for the analysis file in the downloaded content
            if [ -f "$MERGE_RUN_DIR/claude-review-analysis.md" ]; then
              echo "‚úÖ Successfully downloaded Claude review analysis"
              echo "analysis_available=true" >> $GITHUB_OUTPUT
              echo "analysis_path=$MERGE_RUN_DIR/claude-review-analysis.md" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Artifact downloaded but analysis file not found"
              echo "analysis_available=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è No Claude review artifact found for PR #$PR_NUMBER"
            echo "analysis_available=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Prepare decision environment
        run: |
          # Ensure /tmp is writable and create decision template
          sudo chmod 777 /tmp
          echo '{"decision": "PENDING", "reason": "Analysis in progress", "critical_issues": [], "recommended_action": "manual-review"}' > /tmp/merge-decision.json
          chmod 666 /tmp/merge-decision.json
          echo "‚úÖ Decision environment prepared"

      - name: Make merge decision (Release Please)
        id: release-decision
        if: steps.pr-context.outputs.IS_RELEASE_PLEASE == 'true' && steps.validate-release.outputs.release_validation_passed == 'true'
        run: |
          echo "ü§ñ Making automated decision for Release Please PR..."
          
          # Check CI status for Release Please PR
          TEST_STATUS="${{ steps.pr-context.outputs.TEST_CONCLUSION }}"
          SECURITY_STATUS="${{ steps.pr-context.outputs.SECURITY_CONCLUSION }}"
          VALIDATE_STATUS="${{ steps.pr-context.outputs.VALIDATE_CONCLUSION }}"
          
          echo "üìä CI Status Check:"
          echo "  Tests: $TEST_STATUS"
          echo "  Security: $SECURITY_STATUS" 
          echo "  Validation: $VALIDATE_STATUS"
          
          # Decision logic for Release Please PR
          DECISION="APPROVE"
          CRITICAL_ISSUES=()
          
          if [ "$TEST_STATUS" = "FAILURE" ]; then
            DECISION="REJECT"
            CRITICAL_ISSUES+=("Tests failing")
          fi
          
          if [ "$SECURITY_STATUS" = "FAILURE" ]; then
            DECISION="REJECT" 
            CRITICAL_ISSUES+=("Security checks failing")
          fi
          
          if [ "$VALIDATE_STATUS" = "FAILURE" ]; then
            DECISION="REJECT"
            CRITICAL_ISSUES+=("PR validation failing")
          fi
          
          # Create decision JSON
          CRITICAL_ISSUES_JSON=$(printf '%s\n' "${CRITICAL_ISSUES[@]}" | jq -R . | jq -s .)
          
          if [ "$DECISION" = "APPROVE" ]; then
            REASON="Release Please PR with all CI checks passing"
            RECOMMENDED_ACTION="auto-merge"
          else
            REASON="Release Please PR with failing CI checks: $(IFS=', '; echo "${CRITICAL_ISSUES[*]}")"
            RECOMMENDED_ACTION="fix-issues"
          fi
          
          # Create decision file
          MERGE_RUN_DIR="/tmp/merge-decision-${{ github.run_id }}-${{ github.run_attempt }}"
          mkdir -p "$MERGE_RUN_DIR"
          
          cat > "$MERGE_RUN_DIR/merge-decision.json" << EOF
          {
            "decision": "$DECISION",
            "reason": "$REASON",
            "critical_issues": $CRITICAL_ISSUES_JSON,
            "recommended_action": "$RECOMMENDED_ACTION"
          }
          EOF
          
          echo "‚úÖ Release Please decision created: $DECISION"
          echo "üìù Reason: $REASON"
          
          # Add PR comment
          gh pr comment ${{ steps.pr-context.outputs.PR_NUMBER }} \
            --repo ${{ github.repository }} \
            --body "ü§ñ **Automated Release Decision**

          **Decision**: $DECISION  
          **Type**: Release Please PR  
          **Reason**: $REASON  
          **Action**: $RECOMMENDED_ACTION  
          
          **Security Validation**: ‚úÖ Passed
          - Author verified: app/github-actions
          - Branch pattern verified: release-please--*
          - File changes validated: Only safe release files
          
          **CI Status**: 
          - Tests: $TEST_STATUS
          - Security: $SECURITY_STATUS  
          - Validation: $VALIDATE_STATUS
          
          This automated decision was made without Claude review as this is a validated Release Please PR."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Make merge decision (Regular PR)
        id: merge-decision
        if: steps.pr-context.outputs.IS_RELEASE_PLEASE != 'true'
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          allowed_tools: "Bash,Write,Read"
          
          direct_prompt: |
            You are an AI merge decision maker. Analyze the complete context below and decide whether this PR should be merged.

            ## PR Information
            - **Title**: ${{ steps.pr-context.outputs.PR_TITLE }}
            - **Author**: ${{ steps.pr-context.outputs.PR_AUTHOR }}
            - **Target Branch**: ${{ steps.pr-context.outputs.BASE_BRANCH }}
            - **PR Number**: #${{ steps.pr-context.outputs.PR_NUMBER }}
            - **Is Draft**: ${{ steps.pr-context.outputs.PR_IS_DRAFT }}
            - **Is Release Please PR**: ${{ steps.pr-context.outputs.IS_RELEASE_PLEASE }}
            - **Mergeable**: ${{ steps.pr-context.outputs.PR_MERGEABLE }}
            - **Merge State**: ${{ steps.pr-context.outputs.PR_MERGE_STATE }}

            ## CI/CD Check Results
            - **Overall Summary**: ${{ steps.pr-context.outputs.CHECKS_SUMMARY }}
            - **Tests**: ${{ steps.pr-context.outputs.TEST_CONCLUSION }}
            - **Security**: ${{ steps.pr-context.outputs.SECURITY_CONCLUSION }}
            - **Validation**: ${{ steps.pr-context.outputs.VALIDATE_CONCLUSION }}
            - **Claude Review**: ${{ steps.pr-context.outputs.CLAUDE_REVIEW_CONCLUSION }}
            - **Failed Checks**: ${{ steps.pr-context.outputs.FAILED_CHECKS }}

            ## Complete Claude Code Review Analysis
            **IMPORTANT: This is the full Claude review content that must guide your decision:**
            
            ${{ steps.pr-context.outputs.CLAUDE_REVIEW_CONTENT }}
            
            ## Your Task
            Based on the complete context above, **especially Claude's detailed review analysis**, decide whether this PR should be merged.

            **Decision Rules** (in priority order):
            1. **Claude Review Override**: If the Claude review above contains "DO NOT MERGE", "REJECT", or explicitly recommends against merging ‚Üí REJECT
            2. **Critical CI Failures**: If any critical CI checks failed ‚Üí REJECT
            3. **Release Please PRs**: If Release Please PR and all CI checks passed ‚Üí APPROVE
            4. **Regular PRs**: Follow Claude's review recommendations:
               - If Claude approves changes or finds no blocking issues ‚Üí APPROVE
               - If Claude identifies critical issues or concerns ‚Üí REJECT
               - If Claude requests changes ‚Üí REJECT
            5. **Good Code, Process Issues**: If code quality is good (tests pass, no critical issues) but there are workflow/review process issues ‚Üí MANUAL_APPROVAL
            6. **No Clear Guidance**: If unclear but no major issues detected ‚Üí MANUAL_APPROVAL

            **Critical**: Your decision must be based primarily on Claude's review content above. The CI status is secondary to Claude's analysis.

            **IMPORTANT: Use MANUAL_APPROVAL for situations like:**
            - Good code quality but missing detailed review content
            - All/most CI checks pass but needs human verification
            - Minor workflow issues that don't indicate code problems
            - Uncertainty that doesn't stem from actual code issues

            **CRITICAL: You MUST respond with valid JSON in this exact format:**
            ```json
            {
              "decision": "APPROVE|MANUAL_APPROVAL|REJECT",
              "reason": "Brief explanation of your decision based on Claude review and CI status",
              "critical_issues": ["list", "of", "any", "blocking", "issues"],
              "recommended_action": "auto-merge|manual-review|fix-issues"
            }
            ```

            **IMPORTANT**: After providing your analysis, also write your JSON decision to a file for the workflow to process:
            
            Create a file in the merge decision directory with your exact JSON decision using this command:
            ```bash
            MERGE_RUN_DIR="/tmp/merge-decision-${{ github.run_id }}-${{ github.run_attempt }}"
            mkdir -p "$MERGE_RUN_DIR"
            echo '{"decision": "MANUAL_APPROVAL", "reason": "Good code quality but needs human review", "critical_issues": [], "recommended_action": "manual-review"}' > "$MERGE_RUN_DIR/merge-decision.json"
            ```
            
            Replace the values with your actual decision. This ensures the workflow can reliably access your decision.

      - name: Parse merge decision
        id: parse-decision
        run: |
          echo "üìã Parsing merge decision..."
          
          # First, try to read from the decision file (works for both Release Please and Regular PRs)
          MERGE_RUN_DIR="/tmp/merge-decision-${{ github.run_id }}-${{ github.run_attempt }}"
          DECISION_FILE="$MERGE_RUN_DIR/merge-decision.json"
          DECISION_JSON=""
          
          if [ -f "$DECISION_FILE" ]; then
            echo "‚úÖ Found decision file at: $DECISION_FILE"
            DECISION_JSON=$(cat "$DECISION_FILE")
            echo "üìÑ Decision from file: $DECISION_JSON"
          elif [ "${{ steps.pr-context.outputs.IS_RELEASE_PLEASE }}" = "true" ]; then
            echo "‚ùå Release Please PR but no decision file found - this should not happen"
            exit 1
          else
            echo "‚ö†Ô∏è No decision file found, falling back to comment parsing for regular PR..."
            
            # Fallback: Get Claude comment with better filtering
            CLAUDE_DECISION_COMMENT=$(gh pr view ${{ steps.pr-context.outputs.PR_NUMBER }} \
              --repo ${{ github.repository }} \
              --json comments \
              --jq '.comments[] | select(.author.login == "claude" and (.body | contains("\"decision\"") and (contains("APPROVE") or contains("REJECT")))) | .body' \
              | head -1)
            
            if [ -z "$CLAUDE_DECISION_COMMENT" ] || [ "$CLAUDE_DECISION_COMMENT" = "null" ]; then
              echo "‚ùå No decision comment found, trying latest Claude comment..."
              CLAUDE_DECISION_COMMENT=$(gh pr view ${{ steps.pr-context.outputs.PR_NUMBER }} \
                --repo ${{ github.repository }} \
                --json comments \
                --jq '.comments[] | select(.author.login == "claude") | .body' \
                | tail -1)
            fi
            
            # Extract JSON from the comment (handle markdown code blocks)
            DECISION_JSON=$(echo "$CLAUDE_DECISION_COMMENT" | sed -n '/```json/,/```/p' | sed '1d;$d' | tr -d '\n' | head -1)
            if [ -z "$DECISION_JSON" ]; then
              # Fallback: try raw JSON extraction
              DECISION_JSON=$(echo "$CLAUDE_DECISION_COMMENT" | grep -o '{[^}]*"decision"[^}]*}' | head -1)
            fi
            
            if [ -z "$DECISION_JSON" ] || [ "$DECISION_JSON" = "null" ]; then
              echo "‚ùå Failed to extract JSON decision from Claude's comment"
              echo "Raw comment: $CLAUDE_DECISION_COMMENT"
              exit 1
            fi
            
            echo "üìÑ Decision from comment: $DECISION_JSON"
          fi
          
          # Parse the decision
          DECISION=$(echo "$DECISION_JSON" | jq -r '.decision // "UNKNOWN"')
          REASON=$(echo "$DECISION_JSON" | jq -r '.reason // "No reason provided"')
          CRITICAL_ISSUES=$(echo "$DECISION_JSON" | jq -r '.critical_issues // [] | join(", ")')
          RECOMMENDED_ACTION=$(echo "$DECISION_JSON" | jq -r '.recommended_action // "manual-review"')
          
          echo "üéØ Decision: $DECISION"
          echo "üìù Reason: $REASON"
          echo "‚ö†Ô∏è Critical Issues: $CRITICAL_ISSUES"
          echo "üîÑ Recommended Action: $RECOMMENDED_ACTION"
          
          # Export for next steps
          echo "DECISION=$DECISION" >> $GITHUB_OUTPUT
          echo "REASON=$REASON" >> $GITHUB_OUTPUT
          echo "CRITICAL_ISSUES=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "RECOMMENDED_ACTION=$RECOMMENDED_ACTION" >> $GITHUB_OUTPUT
          
          # Fail the step only if decision is REJECT
          if [ "$DECISION" = "REJECT" ]; then
            echo "‚ùå Claude rejected this PR"
            exit 1
          elif [ "$DECISION" = "APPROVE" ]; then
            echo "‚úÖ Claude approved this PR"
          elif [ "$DECISION" = "MANUAL_APPROVAL" ]; then
            echo "üë§ Claude recommends manual approval - good code but needs human review"
          else
            echo "‚ùì Unknown decision: $DECISION"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Apply approved merge decision
        if: steps.parse-decision.outputs.DECISION == 'APPROVE'
        run: |
          echo "‚úÖ Applying approved merge decision..."
          echo "üìù Reason: ${{ steps.parse-decision.outputs.REASON }}"
          
          # Auto-merge if this is a Release Please PR and recommended action is auto-merge
          if [ "${{ steps.pr-context.outputs.IS_RELEASE_PLEASE }}" = "true" ] && [ "${{ steps.parse-decision.outputs.RECOMMENDED_ACTION }}" = "auto-merge" ]; then
            echo "üöÄ Auto-merging Release Please PR..."
            
            if gh pr merge ${{ steps.pr-context.outputs.PR_NUMBER }} \
              --repo ${{ github.repository }} \
              --auto \
              --squash; then
              echo "‚úÖ Auto-merge enabled successfully"
            else
              echo "::warning::Failed to enable auto-merge. PR may need manual merge."
            fi
          else
            echo "üìã PR approved but requires manual merge (action: ${{ steps.parse-decision.outputs.RECOMMENDED_ACTION }})"
          fi
          
          # Create success status (truncate description to 140 chars max)
          REASON="${{ steps.parse-decision.outputs.REASON }}"
          DESCRIPTION="Claude AI approved: ${REASON:0:120}"  # Leave room for prefix
          gh api repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha || github.sha }} \
            -f state=success \
            -f description="$DESCRIPTION" \
            -f context="merge-decision" 2>/dev/null || echo "::warning::Status creation failed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle manual approval decision
        if: steps.parse-decision.outputs.DECISION == 'MANUAL_APPROVAL'
        run: |
          echo "üë§ PR requires manual approval"
          echo "üìù Reason: ${{ steps.parse-decision.outputs.REASON }}"
          echo "üîç This indicates good code quality but human review is needed"
          
          # Create success status with manual approval decision for auto-merge consumption
          REASON="${{ steps.parse-decision.outputs.REASON }}"
          DESCRIPTION="Manual approval: ${REASON:0:110}"  # Keep under 140 chars
          gh api repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha || github.sha }} \
            -f state=success \
            -f description="$DESCRIPTION" \
            -f context="merge-decision" 2>/dev/null || echo "::warning::Status creation failed"
          
          # Export decision for auto-merge job consumption
          echo "MERGE_DECISION=MANUAL_APPROVAL" >> $GITHUB_OUTPUT
          echo "MERGE_REASON=$REASON" >> $GITHUB_OUTPUT
          echo "RECOMMENDED_ACTION=${{ steps.parse-decision.outputs.RECOMMENDED_ACTION }}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Manual approval decision completed - ready for auto-merge evaluation"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle rejected merge decision
        if: failure()
        run: |
          echo "‚ùå PR rejected for merging"
          if [ -n "${{ steps.parse-decision.outputs.REASON }}" ]; then
            echo "üìù Reason: ${{ steps.parse-decision.outputs.REASON }}"
          fi
          if [ -n "${{ steps.parse-decision.outputs.CRITICAL_ISSUES }}" ]; then
            echo "‚ö†Ô∏è Critical Issues: ${{ steps.parse-decision.outputs.CRITICAL_ISSUES }}"
          fi
          
          # Create failure status (truncate description to 140 chars max)
          DESCRIPTION="Claude AI rejected PR"
          if [ -n "${{ steps.parse-decision.outputs.REASON }}" ]; then
            REASON="${{ steps.parse-decision.outputs.REASON }}"
            DESCRIPTION="${DESCRIPTION}: ${REASON:0:115}"  # Leave room for prefix
          fi
          
          gh api repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha || github.sha }} \
            -f state=failure \
            -f description="$DESCRIPTION" \
            -f context="merge-decision" 2>/dev/null || echo "::warning::Status creation failed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-merge:
    runs-on: ubuntu-latest
    needs: merge-decision
    if: |
      always() && 
      (needs.merge-decision.outputs.DECISION == 'APPROVE' || 
       needs.merge-decision.outputs.DECISION == 'MANUAL_APPROVAL')
    
    steps:
      - name: Get PR information
        id: pr-info
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "üîç Processing auto-merge for PR #$PR_NUMBER"
          
          # Get PR details
          PR_DATA=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} \
            --json title,author,headRefName,mergeable,mergeStateStatus,isDraft,state)
          
          echo "PR_DATA<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_DATA" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check merge eligibility
        id: check-merge
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          PR_DATA='${{ steps.pr-info.outputs.PR_DATA }}'
          
          MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable')
          MERGE_STATE=$(echo "$PR_DATA" | jq -r '.mergeStateStatus')
          IS_DRAFT=$(echo "$PR_DATA" | jq -r '.isDraft')
          PR_STATE=$(echo "$PR_DATA" | jq -r '.state')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
          HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          
          echo "üìã PR Status Check:"
          echo "  - State: $PR_STATE"
          echo "  - Mergeable: $MERGEABLE"
          echo "  - Merge State: $MERGE_STATE"
          echo "  - Is Draft: $IS_DRAFT"
          echo "  - Author: $PR_AUTHOR"
          echo "  - Branch: $HEAD_BRANCH"
          
          # Check basic merge requirements
          if [ "$PR_STATE" != "OPEN" ]; then
            echo "‚ùå PR is not open"
            echo "eligible=false" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$IS_DRAFT" = "true" ]; then
            echo "‚ùå PR is a draft"
            echo "eligible=false" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$MERGEABLE" != "MERGEABLE" ]; then
            echo "‚ùå PR is not mergeable (status: $MERGEABLE)"
            echo "eligible=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Determine merge method
          if [[ "$PR_AUTHOR" == "app/github-actions" ]] && [[ "$HEAD_BRANCH" == release-please--* ]]; then
            echo "üîÑ Release Please PR detected"
            echo "merge_method=squash" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "üîÑ Regular PR"
            echo "merge_method=squash" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
          
          echo "‚úÖ PR is eligible for auto-merge"
          echo "eligible=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Execute auto-merge
        if: |
          steps.check-merge.outputs.eligible == 'true' && 
          (needs.merge-decision.outputs.DECISION == 'APPROVE' || 
           (needs.merge-decision.outputs.DECISION == 'MANUAL_APPROVAL' && 
            needs.merge-decision.outputs.RECOMMENDED_ACTION == 'auto-merge'))
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          MERGE_METHOD=${{ steps.check-merge.outputs.merge_method }}
          IS_RELEASE=${{ steps.check-merge.outputs.is_release }}
          DECISION="${{ needs.merge-decision.outputs.DECISION }}"
          
          echo "üöÄ Auto-merging PR #$PR_NUMBER"
          echo "üìã Decision: $DECISION"
          echo "üîß Method: $MERGE_METHOD"
          
          # Detailed error capture for debugging
          echo "üîç Checking repository and PR status..."
          
          # Check PR mergeable status first
          PR_STATUS=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json mergeable,mergeStateStatus | jq -r '.mergeStateStatus')
          echo "üìã PR merge state: $PR_STATUS"
          
          if [ "$PR_STATUS" != "CLEAN" ] && [ "$PR_STATUS" != "UNSTABLE" ]; then
            echo "‚ùå PR is not in a mergeable state: $PR_STATUS"
            gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
              --body "‚ö†Ô∏è **Auto-merge Blocked**\\n\\n‚ùå **Issue**: PR merge state is '$PR_STATUS'\\n‚úÖ **Decision**: $DECISION was approved\\n\\n**Resolution**: Ensure all required checks pass and conflicts are resolved, then try manual merge."
            exit 0
          fi
          
          # Try auto-merge first (GitHub's auto-merge feature)
          echo "üîÑ Attempting to enable auto-merge with $MERGE_METHOD method..."
          AUTO_MERGE_OUTPUT=$(gh pr merge $PR_NUMBER --repo ${{ github.repository }} -$MERGE_METHOD --auto 2>&1) || AUTO_MERGE_FAILED=true
          
          if [ -z "$AUTO_MERGE_FAILED" ]; then
            echo "‚úÖ Successfully enabled auto-merge for PR #$PR_NUMBER"
            echo "üìã Auto-merge output: $AUTO_MERGE_OUTPUT"
            
            gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
              --body "ü§ñ **Auto-merge Enabled** by Claude AI\\n\\n‚úÖ **Decision**: $DECISION\\nüöÄ **Method**: $MERGE_METHOD\\n\\nThis PR will be automatically merged once all required status checks pass."
              
          else
            echo "‚ö†Ô∏è Auto-merge failed: $AUTO_MERGE_OUTPUT"
            echo "üîÑ Attempting direct merge..."
            
            # Try immediate merge
            DIRECT_MERGE_OUTPUT=$(gh pr merge $PR_NUMBER --repo ${{ github.repository }} -$MERGE_METHOD 2>&1) || DIRECT_MERGE_FAILED=true
            
            if [ -z "$DIRECT_MERGE_FAILED" ]; then
              echo "‚úÖ Successfully merged PR #$PR_NUMBER directly"
              echo "üìã Direct merge output: $DIRECT_MERGE_OUTPUT"
              
              gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
                --body "ü§ñ **PR Merged** by Claude AI\\n\\n‚úÖ **Decision**: $DECISION\\nüöÄ **Method**: $MERGE_METHOD\\n\\nThis PR has been automatically merged."
                
            else
              echo "‚ùå Direct merge also failed: $DIRECT_MERGE_OUTPUT"
              echo "üìã Analyzing failure reasons..."
              
              # Provide detailed failure analysis
              if echo "$DIRECT_MERGE_OUTPUT" | grep -q "Resource not accessible"; then
                echo "‚ùå Permission issue detected"
                FAILURE_REASON="Insufficient workflow permissions for merging"
              elif echo "$DIRECT_MERGE_OUTPUT" | grep -q "branch protection"; then
                echo "‚ùå Branch protection rule violation"
                FAILURE_REASON="Branch protection rules prevent automatic merging"
              elif echo "$DIRECT_MERGE_OUTPUT" | grep -q "required status checks"; then
                echo "‚ùå Required status checks not satisfied"
                FAILURE_REASON="Required status checks have not passed"
              else
                echo "‚ùå Unknown merge failure"
                FAILURE_REASON="Unknown error during merge operation"
              fi
              
              gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
                --body "‚ö†Ô∏è **Auto-merge Failed**\\n\\n‚úÖ **Decision**: $DECISION (approved by Claude AI)\\n‚ùå **Issue**: $FAILURE_REASON\\n\\n**Error Details:**\\n\\\`\\\`\\\`\\n$DIRECT_MERGE_OUTPUT\\n\\\`\\\`\\\`\\n\\n**Manual Action Required**: Please merge this PR manually or review repository settings."
              
              # Set output but don't fail the workflow
              echo "auto_merge_failed=true" >> $GITHUB_OUTPUT
              echo "failure_reason=$FAILURE_REASON" >> $GITHUB_OUTPUT
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle manual approval (no auto-merge)
        if: |
          steps.check-merge.outputs.eligible == 'true' && 
          needs.merge-decision.outputs.DECISION == 'MANUAL_APPROVAL' && 
          needs.merge-decision.outputs.RECOMMENDED_ACTION != 'auto-merge'
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          REASON="${{ needs.merge-decision.outputs.REASON }}"
          
          echo "üë§ Manual approval required - skipping auto-merge"
          echo "üìù Reason: $REASON"
          
          gh pr comment $PR_NUMBER --repo ${{ github.repository }} \
            --body "üë§ **Manual Approval Required**\\n\\nüìã **Reason**: $REASON\\nüîç **Action**: Human review needed before merge\\n\\nClaude AI determined this PR has good code quality but requires manual verification before merging."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}