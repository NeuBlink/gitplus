name: Merge Decision

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  checks: read
  id-token: write

jobs:
  ai-merge-decision:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0  # Need full history to check if behind base branch

      # Wait for all critical checks to complete
      - name: Wait for all required checks
        id: wait-for-checks
        run: |
          echo "Waiting for all required checks to complete..."
          
          # Define checks to wait for
          CHECKS=(
            "claude-review"
            "test (20.x)"
            "security"
            "validate-pr"
          )
          
          # Wait for each check with timeout
          for check in "${CHECKS[@]}"; do
            echo "Waiting for $check..."
            
            # Use gh CLI to wait for check
            timeout=1200  # 20 minutes max
            interval=15   # Check every 15 seconds
            elapsed=0
            
            while [ $elapsed -lt $timeout ]; do
              status=$(gh pr checks ${{ github.event.pull_request.number }} --json name,status \
                | jq -r ".[] | select(.name == \"$check\") | .status" || echo "pending")
              
              if [ "$status" != "pending" ] && [ "$status" != "queued" ] && [ "$status" != "" ]; then
                echo "$check completed with status: $status"
                break
              fi
              
              sleep $interval
              elapsed=$((elapsed + interval))
            done
            
            if [ $elapsed -ge $timeout ]; then
              echo "::warning::Timeout waiting for $check"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Gather comprehensive PR context
      - name: Gather PR context
        id: pr-context
        run: |
          echo "Gathering comprehensive PR context..."
          
          # Get all check results
          echo "CHECK_RESULTS<<EOF" >> $GITHUB_OUTPUT
          gh pr checks ${{ github.event.pull_request.number }} --json name,status,conclusion \
            | jq -r '.[] | "\(.name): \(.status) (\(.conclusion // "pending"))"' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get PR metadata
          PR_DATA=$(gh pr view ${{ github.event.pull_request.number }} \
            --json title,body,mergeable,mergeStateStatus,isDraft,author,baseRefName,headRefName)
          
          echo "PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "PR_MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable')" >> $GITHUB_OUTPUT
          echo "PR_MERGE_STATE=$(echo "$PR_DATA" | jq -r '.mergeStateStatus')" >> $GITHUB_OUTPUT
          echo "PR_IS_DRAFT=$(echo "$PR_DATA" | jq -r '.isDraft')" >> $GITHUB_OUTPUT
          
          # Check if PR is behind base branch
          BASE_BRANCH=$(echo "$PR_DATA" | jq -r '.baseRefName')
          HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          
          git fetch origin $BASE_BRANCH
          BEHIND_COUNT=$(git rev-list --count HEAD..origin/$BASE_BRANCH)
          echo "PR_BEHIND_COUNT=$BEHIND_COUNT" >> $GITHUB_OUTPUT
          
          # Get all Claude review comments
          echo "CLAUDE_REVIEWS<<EOF" >> $GITHUB_OUTPUT
          gh pr view ${{ github.event.pull_request.number }} \
            --json comments \
            --jq '.comments[] | select(.author.login == "claude") | .body' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get specific check conclusions
          TEST_RESULT=$(gh pr checks ${{ github.event.pull_request.number }} --json name,conclusion \
            | jq -r '.[] | select(.name == "test (20.x)") | .conclusion // "pending"')
          SECURITY_RESULT=$(gh pr checks ${{ github.event.pull_request.number }} --json name,conclusion \
            | jq -r '.[] | select(.name == "security") | .conclusion // "pending"')
          CLAUDE_RESULT=$(gh pr checks ${{ github.event.pull_request.number }} --json name,conclusion \
            | jq -r '.[] | select(.name == "claude-review") | .conclusion // "pending"')
          
          echo "TEST_CONCLUSION=$TEST_RESULT" >> $GITHUB_OUTPUT
          echo "SECURITY_CONCLUSION=$SECURITY_RESULT" >> $GITHUB_OUTPUT
          echo "CLAUDE_REVIEW_CONCLUSION=$CLAUDE_RESULT" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: AI Merge Decision
        id: merge-decision
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          
          direct_prompt: |
            You are a merge decider for the gitplus repository. Your task is to make a final PASS/FAIL decision for this PR.
            
            ## Context Provided
            
            ### PR Information
            - Title: ${{ steps.pr-context.outputs.PR_TITLE }}
            - Target Branch: ${{ github.event.pull_request.base.ref }}
            - Author: ${{ github.event.pull_request.user.login }}
            - PR Number: #${{ github.event.pull_request.number }}
            - Is Draft: ${{ steps.pr-context.outputs.PR_IS_DRAFT }}
            - Mergeable: ${{ steps.pr-context.outputs.PR_MERGEABLE }}
            - Merge State: ${{ steps.pr-context.outputs.PR_MERGE_STATE }}
            - Behind Base Branch: ${{ steps.pr-context.outputs.PR_BEHIND_COUNT }} commits
            
            ### Check Results
            - Test Status: ${{ steps.pr-context.outputs.TEST_CONCLUSION }}
            - Security Status: ${{ steps.pr-context.outputs.SECURITY_CONCLUSION }}
            - Claude Review Status: ${{ steps.pr-context.outputs.CLAUDE_REVIEW_CONCLUSION }}
            
            ### All Check Results
            ${{ steps.pr-context.outputs.CHECK_RESULTS }}
            
            ### Claude's Review Comments
            ${{ steps.pr-context.outputs.CLAUDE_REVIEWS }}
            
            ## Your Task
            
            Based on ALL the above information, especially Claude's review verdict, make a merge decision.
            
            **IMPORTANT**: You must output your decision as valid JSON and NOTHING ELSE. No markdown, no explanation outside the JSON.
            
            Output exactly this JSON structure:
            
            {
              "decision": "PASS or FAIL",
              "confidence": <number between 0-100>,
              "claude_review_verdict": "<summary of what Claude reviewer concluded>",
              "checks_status": "<summary of CI/CD check results>",
              "blocking_issues": ["<list any blocking issues if FAIL>"],
              "warnings": ["<list any non-blocking concerns>"],
              "summary": "<one sentence summary of your decision>"
            }
            
            Decision rules:
            - FAIL if Claude's review indicates rejection (look for REJECT, FAIL, "Approve with cleanup", or blocking issues)
            - FAIL if any critical checks failed (test, security)
            - FAIL if PR is not mergeable or has conflicts
            - PASS only if Claude approves AND all checks pass AND no blocking issues
            
            Output ONLY the JSON object, nothing else.
        env:
          TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Parse merge decision
        id: parse-decision
        run: |
          echo "Waiting for Claude's response to be posted..."
          sleep 10
          
          # Get the latest comment from Claude (merge decider)
          CLAUDE_RESPONSE=$(gh pr view ${{ github.event.pull_request.number }} \
            --json comments \
            --jq '.comments[-1] | select(.author.login == "claude") | .body' || echo "")
          
          if [ -z "$CLAUDE_RESPONSE" ]; then
            echo "::error::No response from Claude merge decider"
            exit 1
          fi
          
          echo "Claude's response:"
          echo "$CLAUDE_RESPONSE"
          
          # Extract JSON from the response
          # Look for JSON between first { and last }
          JSON_RESPONSE=$(echo "$CLAUDE_RESPONSE" | sed -n '/{/,/}/p' | grep -v '```')
          
          if [ -z "$JSON_RESPONSE" ]; then
            echo "::error::Could not extract JSON from Claude's response"
            exit 1
          fi
          
          echo "Extracted JSON:"
          echo "$JSON_RESPONSE"
          
          # Parse the decision using jq
          DECISION=$(echo "$JSON_RESPONSE" | jq -r '.decision' 2>/dev/null || echo "ERROR")
          CONFIDENCE=$(echo "$JSON_RESPONSE" | jq -r '.confidence' 2>/dev/null || echo "0")
          SUMMARY=$(echo "$JSON_RESPONSE" | jq -r '.summary' 2>/dev/null || echo "No summary provided")
          
          echo "Decision: $DECISION"
          echo "Confidence: $CONFIDENCE"
          echo "Summary: $SUMMARY"
          
          # Set outputs
          echo "MERGE_DECISION=$DECISION" >> $GITHUB_ENV
          echo "DECISION_CONFIDENCE=$CONFIDENCE" >> $GITHUB_ENV
          echo "DECISION_SUMMARY=$SUMMARY" >> $GITHUB_ENV
          
          # Exit based on decision
          if [ "$DECISION" = "PASS" ]; then
            echo "::notice::✅ Merge Decision: PASS (Confidence: $CONFIDENCE%)"
            echo "::notice::$SUMMARY"
            exit 0
          elif [ "$DECISION" = "FAIL" ]; then
            echo "::error::❌ Merge Decision: FAIL (Confidence: $CONFIDENCE%)"
            echo "::error::$SUMMARY"
            exit 1
          else
            echo "::error::Unable to parse merge decision. Expected PASS or FAIL, got: $DECISION"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-decision-summary:
    runs-on: ubuntu-latest
    needs: [ai-merge-decision]
    if: always()
    steps:
      - name: Merge Decision Summary
        run: |
          result="${{ needs.ai-merge-decision.result }}"
          
          echo "# 🤖 Merge Decision Summary"
          echo ""
          
          case "$result" in
            "success")
              echo "## ✅ Decision: APPROVED"
              echo ""
              echo "The AI merge decider has approved this PR for merging."
              echo "- All required checks have passed"
              echo "- Claude's code review is positive"
              echo "- No blocking issues identified"
              echo ""
              echo "This PR is ready to merge! 🚀"
              ;;
            "failure")
              echo "## ❌ Decision: REJECTED"
              echo ""
              echo "The AI merge decider has rejected this PR."
              echo ""
              echo "Please review:"
              echo "1. Claude's review comments for specific issues"
              echo "2. Any failing CI/CD checks"
              echo "3. The merge decision comment for blocking issues"
              echo ""
              echo "Address these issues and push new commits to trigger a new review."
              ;;
            "cancelled")
              echo "## ⚠️ Decision: CANCELLED"
              echo ""
              echo "The merge decision workflow was cancelled."
              echo "This may happen if the PR was closed or the workflow was manually stopped."
              ;;
            *)
              echo "## ❓ Decision: ERROR"
              echo ""
              echo "The merge decision workflow encountered an unexpected error."
              echo "- Result: $result"
              echo ""
              echo "Please check the workflow logs for more details."
              ;;
          esac
          
          # Always exit 0 from summary job to not block other workflows
          exit 0