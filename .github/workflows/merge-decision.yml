name: Merge Decision

on:
  # Trigger when key workflows complete
  workflow_run:
    workflows: 
      - "Claude Code Review"
      - "CI"
      - "PR Checks"
    types:
      - completed

permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  checks: read
  id-token: write

jobs:
  merge-decision:
    runs-on: ubuntu-latest
    # Only run if the triggering workflow succeeded and has an associated PR
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.pull_requests[0] != null
    
    steps:
      - name: Get PR number and check if all workflows completed
        id: pr-check
        run: |
          # Get PR number from the workflow run
          PR_NUMBER=${{ github.event.workflow_run.pull_requests[0].number }}
          
          if [ -z "$PR_NUMBER" ]; then
            echo "::error::No PR associated with this workflow run"
            exit 1
          fi
          
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Found PR #$PR_NUMBER from workflow: ${{ github.event.workflow_run.name }}"
          
          # Check if all required workflows have completed successfully
          echo "Checking if all required workflows have completed..."
          
          # Get all check runs for this PR
          gh pr checks $PR_NUMBER \
            --repo ${{ github.repository }} \
            --json name,conclusion,status > checks.json
          
          # Check if all critical checks are complete and successful
          REQUIRED_CHECKS=(
            "claude-review"
            "test (20.x)"
            "security"
            "validate-pr"
          )
          
          ALL_COMPLETE=true
          ALL_SUCCESS=true
          
          for check in "${REQUIRED_CHECKS[@]}"; do
            STATUS=$(cat checks.json | jq -r ".[] | select(.name == \"$check\") | .status // \"not_found\"")
            CONCLUSION=$(cat checks.json | jq -r ".[] | select(.name == \"$check\") | .conclusion // \"not_found\"")
            
            echo "Check $check: status=$STATUS, conclusion=$CONCLUSION"
            
            if [ "$STATUS" != "completed" ]; then
              ALL_COMPLETE=false
              echo "Check $check is not complete yet"
            fi
            
            if [ "$CONCLUSION" != "success" ] && [ "$CONCLUSION" != "not_found" ]; then
              ALL_SUCCESS=false
              echo "Check $check did not succeed"
            fi
          done
          
          if [ "$ALL_COMPLETE" != "true" ]; then
            echo "Not all required checks are complete yet. Skipping merge decision."
            echo "SHOULD_PROCEED=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ "$ALL_SUCCESS" != "true" ]; then
            echo "Some required checks failed. Will proceed to create failure decision."
          fi
          
          echo "SHOULD_PROCEED=true" >> $GITHUB_OUTPUT
          echo "ALL_CHECKS_PASSED=$ALL_SUCCESS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Gather comprehensive PR context
      - name: Gather PR context
        if: steps.pr-check.outputs.SHOULD_PROCEED == 'true'
        id: pr-context
        run: |
          echo "Gathering comprehensive PR context for PR #${{ steps.pr-check.outputs.PR_NUMBER }}..."
          
          # Get all check results
          echo "CHECK_RESULTS<<EOF" >> $GITHUB_OUTPUT
          gh pr checks ${{ steps.pr-check.outputs.PR_NUMBER }} \
            --repo ${{ github.repository }} \
            --json name,state,conclusion \
            | jq -r '.[] | "\(.name): \(.state) (\(.conclusion // "pending"))"' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get PR metadata
          PR_DATA=$(gh pr view ${{ steps.pr-check.outputs.PR_NUMBER }} \
            --repo ${{ github.repository }} \
            --json title,body,mergeable,mergeStateStatus,isDraft,author,baseRefName,headRefName,commits)
          
          echo "PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "PR_MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable')" >> $GITHUB_OUTPUT
          echo "PR_MERGE_STATE=$(echo "$PR_DATA" | jq -r '.mergeStateStatus')" >> $GITHUB_OUTPUT
          echo "PR_IS_DRAFT=$(echo "$PR_DATA" | jq -r '.isDraft')" >> $GITHUB_OUTPUT
          echo "PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')" >> $GITHUB_OUTPUT
          echo "BASE_BRANCH=$(echo "$PR_DATA" | jq -r '.baseRefName')" >> $GITHUB_OUTPUT
          echo "HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')" >> $GITHUB_OUTPUT
          
          # Check if this is a Release Please PR
          AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
          HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          IS_RELEASE_PLEASE="false"
          if [[ "$AUTHOR" == "app/github-actions" ]] && [[ "$HEAD_BRANCH" == release-please--* ]]; then
            IS_RELEASE_PLEASE="true"
            echo "Detected Release Please PR"
          fi
          echo "IS_RELEASE_PLEASE=$IS_RELEASE_PLEASE" >> $GITHUB_OUTPUT
          
          # Get behind count from PR data
          COMMIT_COUNT=$(echo "$PR_DATA" | jq -r '.commits.totalCount // 0')
          echo "PR_BEHIND_COUNT=0" >> $GITHUB_OUTPUT  # We can't calculate this without checkout
          
          # Get Claude review comments from recent reviews
          echo "CLAUDE_REVIEWS<<EOF" >> $GITHUB_OUTPUT
          gh pr view ${{ steps.pr-check.outputs.PR_NUMBER }} \
            --repo ${{ github.repository }} \
            --json comments \
            --jq '.comments[] | select(.author.login == "claude") | .body' \
            | tail -n 1 >> $GITHUB_OUTPUT  # Get the most recent comment
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get specific check conclusions
          TEST_RESULT=$(gh pr checks ${{ steps.pr-check.outputs.PR_NUMBER }} \
            --repo ${{ github.repository }} \
            --json name,conclusion \
            | jq -r '.[] | select(.name == "test (20.x)") | .conclusion // "pending"')
          SECURITY_RESULT=$(gh pr checks ${{ steps.pr-check.outputs.PR_NUMBER }} \
            --repo ${{ github.repository }} \
            --json name,conclusion \
            | jq -r '.[] | select(.name == "security") | .conclusion // "pending"')
          CLAUDE_RESULT=$(gh pr checks ${{ steps.pr-check.outputs.PR_NUMBER }} \
            --repo ${{ github.repository }} \
            --json name,conclusion \
            | jq -r '.[] | select(.name == "claude-review") | .conclusion // "pending"')
          
          echo "TEST_CONCLUSION=$TEST_RESULT" >> $GITHUB_OUTPUT
          echo "SECURITY_CONCLUSION=$SECURITY_RESULT" >> $GITHUB_OUTPUT
          echo "CLAUDE_REVIEW_CONCLUSION=$CLAUDE_RESULT" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Decision
        if: steps.pr-check.outputs.SHOULD_PROCEED == 'true'
        id: merge-decision
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          
          direct_prompt: |
            IMPORTANT: Output ONLY valid JSON. No markdown, no comments, no explanations. ONLY the JSON object.
            
            Context:
            PR Title: ${{ steps.pr-context.outputs.PR_TITLE }}
            Target Branch: ${{ steps.pr-context.outputs.BASE_BRANCH }}
            Author: ${{ steps.pr-context.outputs.PR_AUTHOR }}
            PR Number: #${{ steps.pr-check.outputs.PR_NUMBER }}
            Is Draft: ${{ steps.pr-context.outputs.PR_IS_DRAFT }}
            Is Release Please: ${{ steps.pr-context.outputs.IS_RELEASE_PLEASE }}
            Mergeable: ${{ steps.pr-context.outputs.PR_MERGEABLE }}
            Merge State: ${{ steps.pr-context.outputs.PR_MERGE_STATE }}
            Test Status: ${{ steps.pr-context.outputs.TEST_CONCLUSION }}
            Security Status: ${{ steps.pr-context.outputs.SECURITY_CONCLUSION }}
            Claude Review Status: ${{ steps.pr-context.outputs.CLAUDE_REVIEW_CONCLUSION }}
            
            Claude's Review Comments:
            ${{ steps.pr-context.outputs.CLAUDE_REVIEWS }}
            
            Based on the above, output ONLY this JSON (replace values appropriately):
            {
              "decision": "PASS",
              "confidence": 95,
              "claude_review_verdict": "Claude strongly approved with no blocking issues",
              "checks_status": "All checks passed",
              "blocking_issues": [],
              "warnings": [],
              "summary": "PR approved - Claude review positive and all checks passed"
            }
            
            Rules:
            - decision must be "PASS" or "FAIL" (no other values)
            - For Release Please PRs: PASS if all checks passed (tests, security, Claude review)
            - For regular PRs: FAIL if Claude rejected or found blocking issues
            - FAIL if tests or security checks failed
            - FAIL if PR is not mergeable or has conflicts
            - PASS only if Claude approved AND all checks passed
            
            OUTPUT ONLY THE JSON OBJECT. NOTHING ELSE.
        env:
          TARGET_BRANCH: ${{ steps.pr-context.outputs.BASE_BRANCH }}
          PR_AUTHOR: ${{ steps.pr-context.outputs.PR_AUTHOR }}
          PR_NUMBER: ${{ steps.pr-check.outputs.PR_NUMBER }}

      - name: Parse merge decision
        if: steps.pr-check.outputs.SHOULD_PROCEED == 'true'
        id: parse-decision
        run: |
          echo "Waiting for Claude's response to be posted..."
          sleep 10
          
          # Get the latest comment from Claude (merge decider)
          CLAUDE_RESPONSE=$(gh pr view ${{ steps.pr-check.outputs.PR_NUMBER }} \
            --repo ${{ github.repository }} \
            --json comments \
            --jq '.comments[-1] | select(.author.login == "claude") | .body' || echo "")
          
          if [ -z "$CLAUDE_RESPONSE" ]; then
            echo "::error::No response from Claude merge decider"
            exit 1
          fi
          
          echo "Claude's response:"
          echo "$CLAUDE_RESPONSE"
          
          # Extract JSON from the response
          # First try to find JSON in code blocks
          JSON_RESPONSE=$(echo "$CLAUDE_RESPONSE" | sed -n '/```json/,/```/p' | grep -v '```' | tr -d '\n')
          
          # If not found in code blocks, look for raw JSON
          if [ -z "$JSON_RESPONSE" ]; then
            JSON_RESPONSE=$(echo "$CLAUDE_RESPONSE" | grep -o '{[^}]*}' | head -1)
          fi
          
          # If still not found, try to extract from the entire response
          if [ -z "$JSON_RESPONSE" ]; then
            # Remove everything before first { and after last }
            JSON_RESPONSE=$(echo "$CLAUDE_RESPONSE" | sed -n 's/.*\({.*}\).*/\1/p')
          fi
          
          if [ -z "$JSON_RESPONSE" ]; then
            echo "::error::Could not extract JSON from Claude's response"
            exit 1
          fi
          
          echo "Extracted JSON:"
          echo "$JSON_RESPONSE"
          
          # Parse the decision using jq
          DECISION=$(echo "$JSON_RESPONSE" | jq -r '.decision' 2>/dev/null || echo "ERROR")
          CONFIDENCE=$(echo "$JSON_RESPONSE" | jq -r '.confidence' 2>/dev/null || echo "0")
          SUMMARY=$(echo "$JSON_RESPONSE" | jq -r '.summary' 2>/dev/null || echo "No summary provided")
          
          echo "Decision: $DECISION"
          echo "Confidence: $CONFIDENCE"
          echo "Summary: $SUMMARY"
          
          # Set outputs
          echo "MERGE_DECISION=$DECISION" >> $GITHUB_ENV
          echo "DECISION_CONFIDENCE=$CONFIDENCE" >> $GITHUB_ENV
          echo "DECISION_SUMMARY=$SUMMARY" >> $GITHUB_ENV
          
          # Exit based on decision
          if [ "$DECISION" = "PASS" ]; then
            echo "::notice::✅ Merge Decision: PASS (Confidence: $CONFIDENCE%)"
            echo "::notice::$SUMMARY"
            
            # Auto-merge if this is a Release Please PR and decision is PASS
            if [ "${{ steps.pr-context.outputs.IS_RELEASE_PLEASE }}" = "true" ]; then
              echo "::notice::🚀 Auto-merging Release Please PR"
              
              # Enable auto-merge for Release Please PR
              gh pr merge ${{ steps.pr-check.outputs.PR_NUMBER }} \
                --repo ${{ github.repository }} \
                --auto \
                --squash \
                || echo "::warning::Failed to enable auto-merge. PR may need manual merge."
            fi
            
            exit 0
          elif [ "$DECISION" = "FAIL" ]; then
            echo "::error::❌ Merge Decision: FAIL (Confidence: $CONFIDENCE%)"
            echo "::error::$SUMMARY"
            exit 1
          else
            echo "::error::Unable to parse merge decision. Expected PASS or FAIL, got: $DECISION"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-decision-summary:
    runs-on: ubuntu-latest
    needs: [merge-decision]
    if: always()
    steps:
      - name: Merge Decision Summary
        run: |
          result="${{ needs.merge-decision.result }}"
          
          echo "# 🤖 Merge Decision Summary"
          echo ""
          
          case "$result" in
            "success")
              echo "## ✅ Decision: APPROVED"
              echo ""
              echo "The merge decider has approved this PR for merging."
              echo "- All required checks have passed"
              echo "- Claude's code review is positive"
              echo "- No blocking issues identified"
              echo ""
              echo "This PR is ready to merge! 🚀"
              ;;
            "failure")
              echo "## ❌ Decision: REJECTED"
              echo ""
              echo "The merge decider has rejected this PR."
              echo ""
              echo "Please review:"
              echo "1. Claude's review comments for specific issues"
              echo "2. Any failing CI/CD checks"
              echo "3. The merge decision comment for blocking issues"
              echo ""
              echo "Address these issues and push new commits to trigger a new review."
              ;;
            "cancelled")
              echo "## ⚠️ Decision: CANCELLED"
              echo ""
              echo "The merge decision workflow was cancelled."
              echo "This may happen if the PR was closed or the workflow was manually stopped."
              ;;
            "skipped")
              echo "## ⏭️ Decision: SKIPPED"
              echo ""
              echo "The merge decision was skipped because:"
              echo "- Not all required checks completed yet, OR"
              echo "- The triggering workflow failed, OR"
              echo "- No PR was associated with the workflow run"
              echo ""
              echo "The workflow will trigger again when another required check completes."
              ;;
            *)
              echo "## ❓ Decision: ERROR"
              echo ""
              echo "The merge decision workflow encountered an unexpected error."
              echo "- Result: $result"
              echo ""
              echo "Please check the workflow logs for more details."
              ;;
          esac
          
          # Always exit 0 from summary job to not block other workflows
          exit 0