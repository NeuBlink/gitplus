name: Merge Decider

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  id-token: write

jobs:
  ai-merge-decision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1

      - name: Wait for CI to complete
        uses: fountainhead/action-wait-for-check@6bb13cd5411b148de5b7563b6d2d2c8e7ff1a618 # v1.2.0
        id: wait-for-ci
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: ci
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 600
          intervalSeconds: 10

      - name: AI Merge Decision Analysis
        id: merge-decision
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          
          direct_prompt: |
            # AI Merge Decision Analysis
            
            You are a merge decider for the gitplus repository. Analyze this PR and make a **PASS/FAIL decision** based on:
            
            1. **Claude Code review findings** (if available)
            2. **CI/CD results** 
            3. **Code quality and changes**
            
            ## Decision Rules
            - **FAIL if**: Claude Code review recommends against merging OR critical issues found
            - **PASS if**: Code looks good and no blocking issues
            - Provide specific, actionable feedback for failures
            
            ## Required Output Format
            
            **CRITICAL**: You MUST include exactly one of these lines in your response:
            - `## ü§ñ Merge Decision: PASS` (if approved)  
            - `## ü§ñ Merge Decision: FAIL` (if rejected)
            
            ## PR Information
            The PR information is available in the environment variables:
            - TARGET_BRANCH: The base branch this PR targets
            - PR_AUTHOR: The username of the PR author
            - PR_NUMBER: The PR number
            
            Use these values in your response format as shown below:
            
            ```
            ## ü§ñ Merge Decision: [PASS/FAIL]
            
            **Target Branch:** [Use TARGET_BRANCH env var]
            **PR Author:** [Use PR_AUTHOR env var]
            
            ### üéØ Analysis Summary
            [Brief summary of your analysis]
            
            ### üîß Recommendation
            [Clear explanation of why this should/shouldn't merge]
            
            ---
            *Decision made by Claude AI ‚Ä¢ PR #[Use PR_NUMBER env var]*
            ```
        env:
          TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Set merge decision status
        run: |
          # Parse the Claude response for merge decision
          decision="unknown"
          
          # Check for emoji format first (preferred)
          if echo "$claude_response" | grep -iq "ü§ñ merge decision:.*pass"; then
            decision="pass"
          elif echo "$claude_response" | grep -iq "ü§ñ merge decision:.*fail"; then
            decision="fail"
          # Fallback to non-emoji format for compatibility
          elif echo "$claude_response" | grep -iq "merge decision:.*pass"; then
            decision="pass"
          elif echo "$claude_response" | grep -iq "merge decision:.*fail"; then
            decision="fail"
          fi
          
          # Handle the decision
          case "$decision" in
            "pass")
              echo "MERGE_DECISION=pass" >> $GITHUB_ENV
              echo "‚úÖ Merge Decision: PASS"
              echo "::notice title=Merge Decision::AI has approved this PR for merging"
              ;;
            "fail")
              echo "MERGE_DECISION=fail" >> $GITHUB_ENV
              echo "‚ùå Merge Decision: FAIL"
              echo "::error title=Merge Decision::AI has rejected this PR. Check the analysis comment for details."
              exit 1
              ;;
            *)
              echo "‚ö†Ô∏è Could not determine merge decision from response"
              echo "MERGE_DECISION=fail" >> $GITHUB_ENV
              echo "::warning title=Parse Error::Could not parse merge decision from AI response. Defaulting to FAIL for safety."
              echo "::group::Claude Response"
              echo "$claude_response"
              echo "::endgroup::"
              exit 1
              ;;
          esac
        env:
          claude_response: ${{ steps.merge-decision.outputs.claude_response }}

  merge-decision-summary:
    runs-on: ubuntu-latest
    needs: [ai-merge-decision]
    if: always()
    steps:
      - name: Merge Decision Summary
        run: |
          if [ "${{ needs.ai-merge-decision.result }}" = "success" ]; then
            echo "‚úÖ Merge Decision: APPROVED"
            echo "This PR has been approved by the merge decider and is ready to merge."
          else
            echo "‚ùå Merge Decision: REJECTED"  
            echo "This PR has been rejected by the merge decider."
            echo "Please check the analysis comment for detailed feedback."
            exit 1
          fi