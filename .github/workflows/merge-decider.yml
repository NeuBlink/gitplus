name: AI Merge Decider

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop, 'release/*']

# Ensure only one merge decision runs per PR
concurrency:
  group: merge-decider-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: read
  actions: read
  id-token: write

jobs:
  # AI-powered merge decision that waits for all CI jobs using native needs
  ai-merge-decision:
    runs-on: ubuntu-latest
    # Wait for all CI jobs to complete using native GitHub Actions dependencies
    needs: [test, security, compatibility, validate-pr, compatibility-check, claude-review]
    # Always run even if some CI jobs fail (we'll analyze the failures)
    if: always()
    
    permissions:
      contents: read
      pull-requests: write
      checks: read
      actions: read
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for comprehensive analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Collect comprehensive context for AI analysis
        id: collect-context
        run: |
          # Create context directory
          mkdir -p .github/context
          
          echo "🔍 Collecting comprehensive PR context for AI analysis..."
          
          # Collect basic PR information
          echo "=== PR INFORMATION ===" > .github/context/pr-info.txt
          echo "PR Number: ${{ github.event.pull_request.number }}" >> .github/context/pr-info.txt
          echo "Title: ${{ github.event.pull_request.title }}" >> .github/context/pr-info.txt
          echo "Author: ${{ github.event.pull_request.user.login }}" >> .github/context/pr-info.txt
          echo "Author Association: ${{ github.event.pull_request.author_association }}" >> .github/context/pr-info.txt
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}" >> .github/context/pr-info.txt
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}" >> .github/context/pr-info.txt
          echo "Files Changed: ${{ github.event.pull_request.changed_files }}" >> .github/context/pr-info.txt
          echo "Additions: ${{ github.event.pull_request.additions }}" >> .github/context/pr-info.txt
          echo "Deletions: ${{ github.event.pull_request.deletions }}" >> .github/context/pr-info.txt
          echo "Draft: ${{ github.event.pull_request.draft }}" >> .github/context/pr-info.txt
          echo "" >> .github/context/pr-info.txt
          
          # Get PR description
          echo "=== PR DESCRIPTION ===" >> .github/context/pr-info.txt
          echo '${{ github.event.pull_request.body }}' >> .github/context/pr-info.txt
          echo "" >> .github/context/pr-info.txt
          
          # Collect commit information
          echo "=== COMMITS ===" > .github/context/commits.txt
          git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} >> .github/context/commits.txt || echo "Could not get commits" >> .github/context/commits.txt
          echo "" >> .github/context/commits.txt
          
          # Collect file changes
          echo "=== FILE CHANGES ===" > .github/context/file-changes.txt
          git diff --name-status ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} >> .github/context/file-changes.txt || echo "Could not get file changes" >> .github/context/file-changes.txt
          echo "" >> .github/context/file-changes.txt
          
          # Get diff stats
          echo "=== DIFF STATISTICS ===" >> .github/context/file-changes.txt
          git diff --stat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} >> .github/context/file-changes.txt || echo "Could not get diff stats" >> .github/context/file-changes.txt
          echo "" >> .github/context/file-changes.txt

      - name: Collect CI job results using GitHub needs context
        run: |
          echo "=== CI JOB RESULTS ===" > .github/context/ci-results.txt
          echo "Collected from GitHub Actions job results:" >> .github/context/ci-results.txt
          echo "" >> .github/context/ci-results.txt
          
          # Analyze results from needs context
          echo "test job result: ${{ needs.test.result }}" >> .github/context/ci-results.txt
          echo "security job result: ${{ needs.security.result }}" >> .github/context/ci-results.txt  
          echo "compatibility job result: ${{ needs.compatibility.result }}" >> .github/context/ci-results.txt
          echo "validate-pr job result: ${{ needs.validate-pr.result }}" >> .github/context/ci-results.txt
          echo "compatibility-check job result: ${{ needs.compatibility-check.result }}" >> .github/context/ci-results.txt
          echo "claude-review job result: ${{ needs.claude-review.result }}" >> .github/context/ci-results.txt
          echo "" >> .github/context/ci-results.txt
          
          # Determine overall CI status
          if [[ "${{ needs.test.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.compatibility.result }}" == "success" && 
                "${{ needs.validate-pr.result }}" == "success" && 
                "${{ needs.compatibility-check.result }}" == "success" ]]; then
            echo "Overall CI Status: PASS" >> .github/context/ci-results.txt
          else
            echo "Overall CI Status: FAIL" >> .github/context/ci-results.txt
            echo "Failed jobs:" >> .github/context/ci-results.txt
            [[ "${{ needs.test.result }}" != "success" ]] && echo "  - test: ${{ needs.test.result }}" >> .github/context/ci-results.txt
            [[ "${{ needs.security.result }}" != "success" ]] && echo "  - security: ${{ needs.security.result }}" >> .github/context/ci-results.txt
            [[ "${{ needs.compatibility.result }}" != "success" ]] && echo "  - compatibility: ${{ needs.compatibility.result }}" >> .github/context/ci-results.txt
            [[ "${{ needs.validate-pr.result }}" != "success" ]] && echo "  - validate-pr: ${{ needs.validate-pr.result }}" >> .github/context/ci-results.txt
            [[ "${{ needs.compatibility-check.result }}" != "success" ]] && echo "  - compatibility-check: ${{ needs.compatibility-check.result }}" >> .github/context/ci-results.txt
          fi

      - name: Collect Claude Code review findings
        run: |
          echo "=== CLAUDE CODE REVIEW ANALYSIS ===" > .github/context/claude-review-analysis.txt
          echo "Claude Review Job Result: ${{ needs.claude-review.result }}" >> .github/context/claude-review-analysis.txt
          echo "" >> .github/context/claude-review-analysis.txt
          
          # Get Claude Code review comments
          if command -v gh &> /dev/null; then
            echo "Fetching Claude Code review comments..." >> .github/context/claude-review-analysis.txt
            
            # Get PR reviews from Claude
            gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
              --jq '.[] | select(.user.login | test("claude|github-actions")) | {state: .state, body: .body, submitted_at: .submitted_at}' \
              > .github/context/claude-review.json 2>/dev/null || echo "[]" > .github/context/claude-review.json
            
            # Get issue comments from Claude  
            gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
              --jq '.[] | select(.user.login | test("claude|github-actions")) | {body: .body, created_at: .created_at}' \
              > .github/context/claude-comments.json 2>/dev/null || echo "[]" > .github/context/claude-comments.json
            
            # Analyze Claude review sentiment
            if [ -s .github/context/claude-review.json ] && [ "$(cat .github/context/claude-review.json)" != "[]" ]; then
              echo "✅ Claude Code review found" >> .github/context/claude-review-analysis.txt
              
              # Check if Claude review indicates issues
              if jq -r '.[].body' .github/context/claude-review.json 2>/dev/null | grep -qi "not.*recommend\|concern\|issue\|problem\|fix.*needed\|should.*not\|❌\|⚠️\|blocking"; then
                echo "⚠️ Claude Code review indicates concerns or issues" >> .github/context/claude-review-analysis.txt
                echo "CLAUDE_SENTIMENT=negative" >> $GITHUB_ENV
              elif jq -r '.[].body' .github/context/claude-review.json 2>/dev/null | grep -qi "looks good\|approved\|ready\|✅\|well done\|recommend.*merg"; then
                echo "✅ Claude Code review appears positive" >> .github/context/claude-review-analysis.txt
                echo "CLAUDE_SENTIMENT=positive" >> $GITHUB_ENV
              else
                echo "ℹ️ Claude Code review is neutral" >> .github/context/claude-review-analysis.txt
                echo "CLAUDE_SENTIMENT=neutral" >> $GITHUB_ENV
              fi
            else
              echo "ℹ️ No Claude Code review found" >> .github/context/claude-review-analysis.txt
              echo "CLAUDE_SENTIMENT=none" >> $GITHUB_ENV
            fi
          else
            echo "GitHub CLI not available, skipping Claude review collection" >> .github/context/claude-review-analysis.txt
            echo "CLAUDE_SENTIMENT=unknown" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: AI Merge Decision Analysis
        id: merge-decision
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          
          direct_prompt: |
            # AI Merge Decision Analysis
            
            You are an AI merge decider for the gitplus repository. Your primary job is to synthesize the **Claude Code review findings** with CI/CD results to make a **PASS/FAIL decision** on whether this PR should be merged.
            
            ## CRITICAL: Decision Hierarchy
            
            The **Claude Code review action has already performed expert code analysis**. Your decision hierarchy:
            
            1. **Claude Code Review Says No/Has Concerns** → **AUTOMATIC FAIL** (regardless of CI status)
            2. **Claude Code Review Positive + CI Passes** → **PASS**
            3. **Claude Code Review Positive + CI Fails** → **FAIL** (fix CI first)
            4. **Claude Code Review Neutral/None + CI Passes** → **PASS**
            5. **Any Critical CI Failures** → **FAIL**
            
            ## Current Context
            
            **CI Job Results (from GitHub Actions):**
            - test: ${{ needs.test.result }}
            - security: ${{ needs.security.result }}
            - compatibility: ${{ needs.compatibility.result }}
            - validate-pr: ${{ needs.validate-pr.result }}
            - compatibility-check: ${{ needs.compatibility-check.result }}
            - claude-review: ${{ needs.claude-review.result }}
            
            **Claude Review Sentiment:** ${{ env.CLAUDE_SENTIMENT }}
            **Target Branch:** ${{ github.event.pull_request.base.ref }}
            **PR Author:** ${{ github.event.pull_request.user.login }} (${{ github.event.pull_request.author_association }})
            
            ## Context Files Available
            
            **Priority order for analysis:**
            1. `.github/context/claude-review.json` - **MOST IMPORTANT** - Claude's expert code review
            2. `.github/context/claude-comments.json` - Claude's additional feedback  
            3. `.github/context/claude-review-analysis.txt` - Claude review summary
            4. `.github/context/ci-results.txt` - CI job results and analysis
            5. `.github/context/pr-info.txt` - PR details and description
            6. `.github/context/commits.txt` - Commit history
            7. `.github/context/file-changes.txt` - File changes and statistics
            
            ## Required Output Format
            
            You MUST provide your decision in this exact format:
            
            ```
            ## 🤖 AI Merge Decision: [PASS/FAIL]
            
            **Target Branch:** ${{ github.event.pull_request.base.ref }}
            **Decision Basis:** [Claude Code Review + CI Status / CI Status Only]  
            **Claude Review Sentiment:** ${{ env.CLAUDE_SENTIMENT }}
            
            ### 🎯 Claude Code Review Analysis
            **Status:** [Found/Not Found]
            **Recommendation:** [Positive/Negative/Neutral/Not Available]
            **Key Findings:** [Summary of Claude's expert analysis or "No Claude review available"]
            
            ### 🔧 CI/CD Status Summary
            **Overall:** [Pass/Fail]
            **Test Results:** ${{ needs.test.result }}
            **Security:** ${{ needs.security.result }}
            **Compatibility:** ${{ needs.compatibility.result }}
            **PR Validation:** ${{ needs.validate-pr.result }}
            **Cross-platform:** ${{ needs.compatibility-check.result }}
            
            ### ✅ Strengths
            - [List positive aspects of this PR]
            
            ### ⚠️ Issues Found
            - [List any issues with severity levels]
            
            ### 🔧 Required Actions (if FAIL)
            1. [Specific, actionable step to fix issue 1]
            2. [Specific, actionable step to fix issue 2]
            3. [etc.]
            
            ### 💡 Final Recommendation
            [Clear explanation of why this should/shouldn't merge, emphasizing how you weighted Claude Code review findings vs CI results]
            
            ---
            *Decision made by Claude AI • Integrating expert Claude Code review • PR #${{ github.event.pull_request.number }}*
            ```
            
            ## Decision Rules
            - **FAIL if**: Claude Code review recommends against merging OR critical CI failures
            - **PASS if**: Claude Code review is positive/neutral AND CI passes  
            - **Always respect Claude Code's expert technical analysis** - don't override its code quality findings
            - Provide specific, actionable remediation steps for failures
            - Consider the author's experience level (first-time contributors get more guidance)
            
            **Remember: The Claude Code review has done the deep technical code analysis. Your job is to synthesize that expert opinion with CI/CD results for the final merge decision.**

      - name: Set merge decision status
        run: |
          # Extract decision from Claude's response
          if echo "${{ steps.merge-decision.outputs.claude_response }}" | grep -q "AI Merge Decision: PASS"; then
            echo "MERGE_DECISION=pass" >> $GITHUB_ENV
            echo "✅ AI Merge Decision: PASS"
          elif echo "${{ steps.merge-decision.outputs.claude_response }}" | grep -q "AI Merge Decision: FAIL"; then
            echo "MERGE_DECISION=fail" >> $GITHUB_ENV
            echo "❌ AI Merge Decision: FAIL"
            exit 1
          else
            echo "⚠️ Could not determine merge decision from AI response"
            echo "MERGE_DECISION=fail" >> $GITHUB_ENV
            exit 1
          fi

      - name: Update PR labels based on decision
        if: always()
        run: |
          if [ "${{ env.MERGE_DECISION }}" = "pass" ]; then
            gh pr edit ${{ github.event.pull_request.number }} --add-label "ready-to-merge" --remove-label "needs-changes" || true
          else
            gh pr edit ${{ github.event.pull_request.number }} --add-label "needs-changes" --remove-label "ready-to-merge" || true
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job that branch protection will check - this is what branch protection waits for
  merge-decision-summary:
    runs-on: ubuntu-latest
    needs: [ai-merge-decision]
    if: always()
    steps:
      - name: Merge Decision Summary
        run: |
          if [ "${{ needs.ai-merge-decision.result }}" = "success" ]; then
            echo "✅ AI Merge Decision: APPROVED"
            echo "This PR has been approved by the AI merge decider and is ready to merge."
            echo "The AI analyzed Claude Code review findings and all CI results to make this decision."
          else
            echo "❌ AI Merge Decision: REJECTED"  
            echo "This PR has been rejected by the AI merge decider."
            echo "Please check the AI analysis comment for detailed feedback and required actions."
            echo "The decision was based on Claude Code review findings and/or CI failures."
            exit 1
          fi