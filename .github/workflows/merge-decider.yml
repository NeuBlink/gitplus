name: Merge Decider

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  id-token: write

jobs:
  ai-merge-decision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1

      - name: AI Merge Decision Analysis
        id: merge-decision
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          
          direct_prompt: |
            # AI Merge Decision Analysis
            
            You are a merge decider for the gitplus repository. Analyze this PR and make a **PASS/FAIL decision** based on:
            
            1. **Claude Code review findings** (if available)
            2. **CI/CD results** 
            3. **Code quality and changes**
            
            ## Decision Rules
            - **FAIL if**: Claude Code review recommends against merging OR critical issues found
            - **PASS if**: Code looks good and no blocking issues
            - Provide specific, actionable feedback for failures
            
            ## Required Output Format
            
            **CRITICAL**: You MUST include exactly one of these lines in your response:
            - `## ü§ñ Merge Decision: PASS` (if approved)  
            - `## ü§ñ Merge Decision: FAIL` (if rejected)
            
            Full format:
            ```
            ## ü§ñ Merge Decision: [PASS/FAIL]
            
            **Target Branch:** ${{ github.event.pull_request.base.ref }}
            **PR Author:** ${{ github.event.pull_request.user.login }}
            
            ### üéØ Analysis Summary
            [Brief summary of your analysis]
            
            ### üîß Recommendation
            [Clear explanation of why this should/shouldn't merge]
            
            ---
            *Decision made by Claude AI ‚Ä¢ PR #${{ github.event.pull_request.number }}*
            ```

      - name: Set merge decision status
        run: |
          echo "üîç DEBUG: Claude response length: ${#claude_response}"
          echo "üîç DEBUG: Claude response (first 500 chars):"
          echo "$claude_response" | head -c 500
          echo ""
          echo "üîç DEBUG: Looking for decision patterns..."
          
          if echo "$claude_response" | grep -q "Merge Decision: PASS\|AI Merge Decision: PASS"; then
            echo "MERGE_DECISION=pass" >> $GITHUB_ENV
            echo "‚úÖ Merge Decision: PASS"
          elif echo "$claude_response" | grep -q "Merge Decision: FAIL\|AI Merge Decision: FAIL"; then
            echo "MERGE_DECISION=fail" >> $GITHUB_ENV
            echo "‚ùå Merge Decision: FAIL"
            exit 1
          elif [ -z "$claude_response" ]; then
            echo "‚ö†Ô∏è Claude response is empty"
            echo "MERGE_DECISION=fail" >> $GITHUB_ENV
            exit 1
          else
            echo "‚ö†Ô∏è Could not determine merge decision from response"
            echo "üîç DEBUG: Response content:"
            echo "$claude_response"
            echo "MERGE_DECISION=fail" >> $GITHUB_ENV
            exit 1
          fi
        env:
          claude_response: ${{ steps.merge-decision.outputs.claude_response }}

  merge-decision-summary:
    runs-on: ubuntu-latest
    needs: [ai-merge-decision]
    if: always()
    steps:
      - name: Merge Decision Summary
        run: |
          if [ "${{ needs.ai-merge-decision.result }}" = "success" ]; then
            echo "‚úÖ Merge Decision: APPROVED"
            echo "This PR has been approved by the merge decider and is ready to merge."
          else
            echo "‚ùå Merge Decision: REJECTED"  
            echo "This PR has been rejected by the merge decider."
            echo "Please check the analysis comment for detailed feedback."
            exit 1
          fi