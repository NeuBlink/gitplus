name: Merge Decider

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  id-token: write

jobs:
  ai-merge-decision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1

      - name: Wait for test jobs to complete
        uses: fountainhead/action-wait-for-check@5a908a24814494009c4bb27c242ea38c93c593be # v1.2.0
        id: wait-for-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: test (20.x)
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 600
          intervalSeconds: 10
      
      - name: Wait for security checks to complete
        uses: fountainhead/action-wait-for-check@5a908a24814494009c4bb27c242ea38c93c593be # v1.2.0
        id: wait-for-security
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: security
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 600
          intervalSeconds: 10
      
      - name: Wait for Claude review to complete
        uses: fountainhead/action-wait-for-check@5a908a24814494009c4bb27c242ea38c93c593be # v1.2.0
        id: wait-for-claude-review
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: claude-review
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 1200
          intervalSeconds: 15

      - name: Collect PR context
        id: pr-context
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          # Safely write PR context to outputs using environment variables
          echo "PR_TITLE<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_TITLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "PR_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check CI status
          echo "TEST_STATUS=${{ steps.wait-for-tests.outputs.status }}" >> $GITHUB_OUTPUT
          echo "SECURITY_STATUS=${{ steps.wait-for-security.outputs.status }}" >> $GITHUB_OUTPUT
          echo "CLAUDE_REVIEW_STATUS=${{ steps.wait-for-claude-review.outputs.status }}" >> $GITHUB_OUTPUT
      
      - name: Fetch Claude review comments
        id: fetch-claude-comments
        run: |
          echo "Fetching Claude's review comments..."
          
          # Fetch all comments from the PR
          gh pr view ${{ github.event.pull_request.number }} \
            --json comments \
            --jq '.comments[] | select(.author.login == "claude") | .body' \
            > claude_comments.txt || true
          
          # Get the latest Claude comment (last one in the file)
          if [ -s claude_comments.txt ]; then
            echo "Found Claude review comments"
            # Store all Claude comments for context
            echo "CLAUDE_COMMENTS<<EOF" >> $GITHUB_OUTPUT
            cat claude_comments.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No Claude comments found yet"
            echo "CLAUDE_COMMENTS=No Claude review comments found" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: AI Merge Decision Analysis
        id: merge-decision
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          
          direct_prompt: |
            # AI Merge Decision Analysis
            
            You are a merge decider for the gitplus repository. Analyze this PR and make a **PASS/FAIL decision** based on:
            
            1. **Claude Code review findings** (provided below)
            2. **CI/CD results**: Test Status = ${{ steps.pr-context.outputs.TEST_STATUS }}, Security Status = ${{ steps.pr-context.outputs.SECURITY_STATUS }}
            3. **Code quality and changes**
            
            PR Title: ${{ steps.pr-context.outputs.PR_TITLE }}
            
            ## Claude Code Review Comments
            
            ${{ steps.fetch-claude-comments.outputs.CLAUDE_COMMENTS }}
            
            ## Decision Rules
            - **FAIL if**: Claude Code review recommends against merging OR critical issues found OR tests/security checks failed
            - **PASS if**: Claude Code review approves (look for "‚úÖ Approve", "‚úÖ Strongly Approve", or "PASS" in the review) AND all checks pass
            - Parse Claude's review carefully - look for their final verdict/recommendation
            
            ## Required Output Format
            
            **CRITICAL**: You MUST include exactly one of these lines in your response:
            - `## ü§ñ Merge Decision: PASS` (if approved)  
            - `## ü§ñ Merge Decision: FAIL` (if rejected)
            
            ## PR Information
            The PR information is available in the environment variables:
            - TARGET_BRANCH: The base branch this PR targets
            - PR_AUTHOR: The username of the PR author
            - PR_NUMBER: The PR number
            
            Use these values in your response format as shown below:
            
            ```
            ## ü§ñ Merge Decision: [PASS/FAIL]
            
            **Target Branch:** [Use TARGET_BRANCH env var]
            **PR Author:** [Use PR_AUTHOR env var]
            
            ### üéØ Analysis Summary
            [Brief summary of your analysis including key points from Claude's review]
            
            ### üìä Review Assessment
            **Previous Claude Code Reviews**: [Summarize Claude's verdict]
            **CI/CD Status**: [Test and security check results]
            **Code Quality**: [Based on Claude's analysis]
            
            ### üîß Recommendation
            [Clear explanation of why this should/shouldn't merge, referencing Claude's findings]
            
            ---
            *Decision made by Claude AI ‚Ä¢ PR #[Use PR_NUMBER env var]*
            ```
        env:
          TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Debug - Check Claude action outputs
        run: |
          echo "::group::All outputs from Claude action"
          echo "Steps context: ${{ toJSON(steps.merge-decision) }}"
          echo "::endgroup::"
          
      - name: Set merge decision status
        id: parse-decision
        run: |
          echo "Parsing merge decision from Claude's response..."
          
          # Wait a moment for the comment to be posted
          sleep 5
          
          # Fetch the latest comment from claude (merge decider)
          gh pr view ${{ github.event.pull_request.number }} \
            --json comments \
            --jq '.comments[-1] | select(.author.login == "claude") | .body' \
            > merge_decision_comment.txt || true
          
          if [ -s merge_decision_comment.txt ]; then
            echo "Found merge decision comment"
            cat merge_decision_comment.txt
            
            # Check for PASS decision
            if grep -q "## ü§ñ Merge Decision: PASS" merge_decision_comment.txt; then
              echo "MERGE_DECISION=PASS" >> $GITHUB_ENV
              echo "::notice::‚úÖ Merge Decision: PASS - PR approved for merging"
              exit 0
            # Check for FAIL decision
            elif grep -q "## ü§ñ Merge Decision: FAIL" merge_decision_comment.txt; then
              echo "MERGE_DECISION=FAIL" >> $GITHUB_ENV
              echo "::error::‚ùå Merge Decision: FAIL - PR rejected"
              exit 1
            else
              echo "::error::Unable to parse merge decision from Claude's comment"
              echo "MERGE_DECISION=UNKNOWN" >> $GITHUB_ENV
              exit 1
            fi
          else
            echo "::error::No merge decision comment found from Claude"
            echo "MERGE_DECISION=NOT_FOUND" >> $GITHUB_ENV
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-decision-summary:
    runs-on: ubuntu-latest
    needs: [ai-merge-decision]
    if: always()
    steps:
      - name: Merge Decision Summary
        run: |
          result="${{ needs.ai-merge-decision.result }}"
          
          case "$result" in
            "success")
              echo "## ‚úÖ Merge Decision: APPROVED"
              echo ""
              echo "The AI merge decider has approved this PR for merging."
              echo "All checks have passed and Claude's review is positive."
              echo ""
              echo "::notice::‚úÖ AI merge decider has APPROVED this PR"
              exit 0
              ;;
            "failure")
              echo "## ‚ùå Merge Decision: REJECTED"
              echo ""
              echo "The AI merge decider has rejected this PR."
              echo "Please check Claude's review comment for specific issues to address."
              echo ""
              echo "::error::‚ùå AI merge decider has REJECTED this PR"
              exit 1
              ;;
            "cancelled")
              echo "## ‚ö†Ô∏è Merge Decision: CANCELLED"
              echo ""
              echo "The merge decision workflow was cancelled."
              echo ""
              echo "::warning::Merge decision workflow was cancelled"
              exit 1
              ;;
            *)
              echo "## ‚ùì Merge Decision: ERROR"
              echo ""
              echo "The merge decision workflow encountered an unexpected error."
              echo "Result: $result"
              echo ""
              echo "::error::Merge decision workflow error - unexpected result: $result"
              exit 1
              ;;
          esac