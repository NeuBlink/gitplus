name: Merge Decider

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: read
  issues: read
  actions: read
  id-token: write

jobs:
  ai-merge-decision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 1

      - name: Wait for test jobs to complete
        uses: fountainhead/action-wait-for-check@6bb13cd5411b148de5b7563b6d2d2c8e7ff1a618 # v1.2.0
        id: wait-for-tests
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: test (20.x)
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 600
          intervalSeconds: 10
      
      - name: Wait for security checks to complete
        uses: fountainhead/action-wait-for-check@6bb13cd5411b148de5b7563b6d2d2c8e7ff1a618 # v1.2.0
        id: wait-for-security
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: security
          ref: ${{ github.event.pull_request.head.sha }}
          timeoutSeconds: 600
          intervalSeconds: 10

      - name: Collect PR context
        id: pr-context
        run: |
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "PR_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check CI status
          echo "TEST_STATUS=${{ steps.wait-for-tests.outputs.status }}" >> $GITHUB_OUTPUT
          echo "SECURITY_STATUS=${{ steps.wait-for-security.outputs.status }}" >> $GITHUB_OUTPUT

      - name: AI Merge Decision Analysis
        id: merge-decision
        uses: anthropics/claude-code-action@e26577a930883943cf9d90885cd1e8da510078dd # beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          use_sticky_comment: true
          
          direct_prompt: |
            # AI Merge Decision Analysis
            
            You are a merge decider for the gitplus repository. Analyze this PR and make a **PASS/FAIL decision** based on:
            
            1. **Claude Code review findings** (if available)
            2. **CI/CD results**: Test Status = ${{ steps.pr-context.outputs.TEST_STATUS }}, Security Status = ${{ steps.pr-context.outputs.SECURITY_STATUS }}
            3. **Code quality and changes**
            
            PR Title: ${{ steps.pr-context.outputs.PR_TITLE }}
            
            ## Decision Rules
            - **FAIL if**: Claude Code review recommends against merging OR critical issues found
            - **PASS if**: Code looks good and no blocking issues
            - Provide specific, actionable feedback for failures
            
            ## Required Output Format
            
            **CRITICAL**: You MUST include exactly one of these lines in your response:
            - `## ü§ñ Merge Decision: PASS` (if approved)  
            - `## ü§ñ Merge Decision: FAIL` (if rejected)
            
            ## PR Information
            The PR information is available in the environment variables:
            - TARGET_BRANCH: The base branch this PR targets
            - PR_AUTHOR: The username of the PR author
            - PR_NUMBER: The PR number
            
            Use these values in your response format as shown below:
            
            ```
            ## ü§ñ Merge Decision: [PASS/FAIL]
            
            **Target Branch:** [Use TARGET_BRANCH env var]
            **PR Author:** [Use PR_AUTHOR env var]
            
            ### üéØ Analysis Summary
            [Brief summary of your analysis]
            
            ### üîß Recommendation
            [Clear explanation of why this should/shouldn't merge]
            
            ---
            *Decision made by Claude AI ‚Ä¢ PR #[Use PR_NUMBER env var]*
            ```
        env:
          TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Debug - Check Claude action outputs
        run: |
          echo "::group::All outputs from Claude action"
          echo "Steps context: ${{ toJSON(steps.merge-decision) }}"
          echo "::endgroup::"
          
      - name: Set merge decision status
        id: parse-decision
        run: |
          # Since claude_response output might not be available, let's check the PR comments
          # The Claude action should have posted its analysis as a comment
          echo "::notice::Checking for merge decision in PR comments..."
          
          # For now, let's assume the decision was posted as a comment
          # We'll need to parse it from there or wait for the action to complete
          echo "MERGE_DECISION=pending" >> $GITHUB_ENV
          echo "::warning::Manual review of Claude's comment required to determine merge decision"
          
          # Don't fail here - let the summary job handle the final decision
          exit 0

  merge-decision-summary:
    runs-on: ubuntu-latest
    needs: [ai-merge-decision]
    if: always()
    steps:
      - name: Merge Decision Summary
        run: |
          result="${{ needs.ai-merge-decision.result }}"
          
          case "$result" in
            "success")
              echo "‚úÖ Merge Decision: APPROVED"
              echo "This PR has been approved by the merge decider and is ready to merge."
              echo "::notice::AI merge decider has approved this PR."
              ;;
            "failure")
              echo "‚ùå Merge Decision: REJECTED or ERROR"
              echo "The merge decision workflow encountered an issue."
              echo "Please check the Claude Code comment on the PR for the actual decision."
              echo "::warning::The merge decision could not be automatically determined. Manual review required."
              # Don't exit with error - this might just be a parsing issue
              ;;
            "cancelled")
              echo "‚ö†Ô∏è Merge Decision: CANCELLED"
              echo "The merge decision workflow was cancelled."
              exit 1
              ;;
            *)
              echo "‚ùì Merge Decision: UNKNOWN"
              echo "Unexpected workflow result: $result"
              exit 1
              ;;
          esac